/*
 *  Copyright (c) 2017-present, Facebook, Inc.
 *
 *  This source code is licensed under the MIT license found in the LICENSE
 *  file in the root directory of this source tree.
 *
 */

/*
 *  THIS FILE IS AUTOGENERATED. DO NOT MODIFY IT; ALL CHANGES WILL BE LOST IN
 *  VAIN.
 *
 *  @generated
 */

namespace facebook {
namespace memcache {

template <class V>
void McGetRequest::visitFields(V&& v) {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "flags", flags_)) {
    return;
  }
}

template <class V>
void McGetRequest::visitFields(V&& v) const {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "flags", flags_)) {
    return;
  }
}

template <class V>
void McGetReply::visitFields(V&& v) {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "value", value_)) {
    return;
  }
  if (!v.visitField(3, "flags", flags_)) {
    return;
  }
  if (!v.visitField(4, "message", message_)) {
    return;
  }
  if (!v.visitField(5, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class V>
void McGetReply::visitFields(V&& v) const {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "value", value_)) {
    return;
  }
  if (!v.visitField(3, "flags", flags_)) {
    return;
  }
  if (!v.visitField(4, "message", message_)) {
    return;
  }
  if (!v.visitField(5, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class V>
void McSetRequest::visitFields(V&& v) {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "exptime", exptime_)) {
    return;
  }
  if (!v.visitField(3, "flags", flags_)) {
    return;
  }
  if (!v.visitField(4, "value", value_)) {
    return;
  }
}

template <class V>
void McSetRequest::visitFields(V&& v) const {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "exptime", exptime_)) {
    return;
  }
  if (!v.visitField(3, "flags", flags_)) {
    return;
  }
  if (!v.visitField(4, "value", value_)) {
    return;
  }
}

template <class V>
void McSetReply::visitFields(V&& v) {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "flags", flags_)) {
    return;
  }
  if (!v.visitField(3, "value", value_)) {
    return;
  }
  if (!v.visitField(4, "message", message_)) {
    return;
  }
  if (!v.visitField(5, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class V>
void McSetReply::visitFields(V&& v) const {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "flags", flags_)) {
    return;
  }
  if (!v.visitField(3, "value", value_)) {
    return;
  }
  if (!v.visitField(4, "message", message_)) {
    return;
  }
  if (!v.visitField(5, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class V>
void McDeleteRequest::visitFields(V&& v) {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "flags", flags_)) {
    return;
  }
  if (!v.visitField(3, "exptime", exptime_)) {
    return;
  }
  if (!v.visitField(4, "value", value_)) {
    return;
  }
}

template <class V>
void McDeleteRequest::visitFields(V&& v) const {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "flags", flags_)) {
    return;
  }
  if (!v.visitField(3, "exptime", exptime_)) {
    return;
  }
  if (!v.visitField(4, "value", value_)) {
    return;
  }
}

template <class V>
void McDeleteReply::visitFields(V&& v) {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "flags", flags_)) {
    return;
  }
  if (!v.visitField(3, "value", value_)) {
    return;
  }
  if (!v.visitField(4, "message", message_)) {
    return;
  }
  if (!v.visitField(5, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class V>
void McDeleteReply::visitFields(V&& v) const {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "flags", flags_)) {
    return;
  }
  if (!v.visitField(3, "value", value_)) {
    return;
  }
  if (!v.visitField(4, "message", message_)) {
    return;
  }
  if (!v.visitField(5, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class V>
void McLeaseGetRequest::visitFields(V&& v) {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "flags", flags_)) {
    return;
  }
}

template <class V>
void McLeaseGetRequest::visitFields(V&& v) const {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "flags", flags_)) {
    return;
  }
}

template <class V>
void McLeaseGetReply::visitFields(V&& v) {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "leaseToken", leaseToken_)) {
    return;
  }
  if (!v.visitField(3, "value", value_)) {
    return;
  }
  if (!v.visitField(4, "flags", flags_)) {
    return;
  }
  if (!v.visitField(5, "message", message_)) {
    return;
  }
  if (!v.visitField(6, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class V>
void McLeaseGetReply::visitFields(V&& v) const {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "leaseToken", leaseToken_)) {
    return;
  }
  if (!v.visitField(3, "value", value_)) {
    return;
  }
  if (!v.visitField(4, "flags", flags_)) {
    return;
  }
  if (!v.visitField(5, "message", message_)) {
    return;
  }
  if (!v.visitField(6, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class V>
void McLeaseSetRequest::visitFields(V&& v) {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "exptime", exptime_)) {
    return;
  }
  if (!v.visitField(3, "flags", flags_)) {
    return;
  }
  if (!v.visitField(4, "value", value_)) {
    return;
  }
  if (!v.visitField(5, "leaseToken", leaseToken_)) {
    return;
  }
}

template <class V>
void McLeaseSetRequest::visitFields(V&& v) const {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "exptime", exptime_)) {
    return;
  }
  if (!v.visitField(3, "flags", flags_)) {
    return;
  }
  if (!v.visitField(4, "value", value_)) {
    return;
  }
  if (!v.visitField(5, "leaseToken", leaseToken_)) {
    return;
  }
}

template <class V>
void McLeaseSetReply::visitFields(V&& v) {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "message", message_)) {
    return;
  }
  if (!v.visitField(3, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class V>
void McLeaseSetReply::visitFields(V&& v) const {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "message", message_)) {
    return;
  }
  if (!v.visitField(3, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class V>
void McAddRequest::visitFields(V&& v) {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "exptime", exptime_)) {
    return;
  }
  if (!v.visitField(3, "flags", flags_)) {
    return;
  }
  if (!v.visitField(4, "value", value_)) {
    return;
  }
}

template <class V>
void McAddRequest::visitFields(V&& v) const {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "exptime", exptime_)) {
    return;
  }
  if (!v.visitField(3, "flags", flags_)) {
    return;
  }
  if (!v.visitField(4, "value", value_)) {
    return;
  }
}

template <class V>
void McAddReply::visitFields(V&& v) {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "message", message_)) {
    return;
  }
  if (!v.visitField(3, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class V>
void McAddReply::visitFields(V&& v) const {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "message", message_)) {
    return;
  }
  if (!v.visitField(3, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class V>
void McReplaceRequest::visitFields(V&& v) {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "exptime", exptime_)) {
    return;
  }
  if (!v.visitField(3, "flags", flags_)) {
    return;
  }
  if (!v.visitField(4, "value", value_)) {
    return;
  }
}

template <class V>
void McReplaceRequest::visitFields(V&& v) const {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "exptime", exptime_)) {
    return;
  }
  if (!v.visitField(3, "flags", flags_)) {
    return;
  }
  if (!v.visitField(4, "value", value_)) {
    return;
  }
}

template <class V>
void McReplaceReply::visitFields(V&& v) {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "message", message_)) {
    return;
  }
  if (!v.visitField(3, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class V>
void McReplaceReply::visitFields(V&& v) const {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "message", message_)) {
    return;
  }
  if (!v.visitField(3, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class V>
void McGetsRequest::visitFields(V&& v) {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
}

template <class V>
void McGetsRequest::visitFields(V&& v) const {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
}

template <class V>
void McGetsReply::visitFields(V&& v) {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "casToken", casToken_)) {
    return;
  }
  if (!v.visitField(3, "value", value_)) {
    return;
  }
  if (!v.visitField(4, "flags", flags_)) {
    return;
  }
  if (!v.visitField(5, "message", message_)) {
    return;
  }
  if (!v.visitField(6, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class V>
void McGetsReply::visitFields(V&& v) const {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "casToken", casToken_)) {
    return;
  }
  if (!v.visitField(3, "value", value_)) {
    return;
  }
  if (!v.visitField(4, "flags", flags_)) {
    return;
  }
  if (!v.visitField(5, "message", message_)) {
    return;
  }
  if (!v.visitField(6, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class V>
void McCasRequest::visitFields(V&& v) {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "exptime", exptime_)) {
    return;
  }
  if (!v.visitField(3, "flags", flags_)) {
    return;
  }
  if (!v.visitField(4, "value", value_)) {
    return;
  }
  if (!v.visitField(5, "casToken", casToken_)) {
    return;
  }
}

template <class V>
void McCasRequest::visitFields(V&& v) const {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "exptime", exptime_)) {
    return;
  }
  if (!v.visitField(3, "flags", flags_)) {
    return;
  }
  if (!v.visitField(4, "value", value_)) {
    return;
  }
  if (!v.visitField(5, "casToken", casToken_)) {
    return;
  }
}

template <class V>
void McCasReply::visitFields(V&& v) {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "message", message_)) {
    return;
  }
  if (!v.visitField(3, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class V>
void McCasReply::visitFields(V&& v) const {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "message", message_)) {
    return;
  }
  if (!v.visitField(3, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class V>
void McIncrRequest::visitFields(V&& v) {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "delta", delta_)) {
    return;
  }
}

template <class V>
void McIncrRequest::visitFields(V&& v) const {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "delta", delta_)) {
    return;
  }
}

template <class V>
void McIncrReply::visitFields(V&& v) {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "delta", delta_)) {
    return;
  }
  if (!v.visitField(3, "message", message_)) {
    return;
  }
  if (!v.visitField(4, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class V>
void McIncrReply::visitFields(V&& v) const {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "delta", delta_)) {
    return;
  }
  if (!v.visitField(3, "message", message_)) {
    return;
  }
  if (!v.visitField(4, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class V>
void McDecrRequest::visitFields(V&& v) {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "delta", delta_)) {
    return;
  }
}

template <class V>
void McDecrRequest::visitFields(V&& v) const {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "delta", delta_)) {
    return;
  }
}

template <class V>
void McDecrReply::visitFields(V&& v) {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "delta", delta_)) {
    return;
  }
  if (!v.visitField(3, "message", message_)) {
    return;
  }
  if (!v.visitField(4, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class V>
void McDecrReply::visitFields(V&& v) const {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "delta", delta_)) {
    return;
  }
  if (!v.visitField(3, "message", message_)) {
    return;
  }
  if (!v.visitField(4, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class V>
void McMetagetRequest::visitFields(V&& v) {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
}

template <class V>
void McMetagetRequest::visitFields(V&& v) const {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
}

template <class V>
void McMetagetReply::visitFields(V&& v) {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "age", age_)) {
    return;
  }
  if (!v.visitField(3, "exptime", exptime_)) {
    return;
  }
  if (!v.visitField(4, "ipv", ipv_)) {
    return;
  }
  if (!v.visitField(5, "ipAddress", ipAddress_)) {
    return;
  }
  if (!v.visitField(6, "message", message_)) {
    return;
  }
  if (!v.visitField(7, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class V>
void McMetagetReply::visitFields(V&& v) const {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "age", age_)) {
    return;
  }
  if (!v.visitField(3, "exptime", exptime_)) {
    return;
  }
  if (!v.visitField(4, "ipv", ipv_)) {
    return;
  }
  if (!v.visitField(5, "ipAddress", ipAddress_)) {
    return;
  }
  if (!v.visitField(6, "message", message_)) {
    return;
  }
  if (!v.visitField(7, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class V>
void McAppendRequest::visitFields(V&& v) {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "exptime", exptime_)) {
    return;
  }
  if (!v.visitField(3, "flags", flags_)) {
    return;
  }
  if (!v.visitField(4, "value", value_)) {
    return;
  }
}

template <class V>
void McAppendRequest::visitFields(V&& v) const {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "exptime", exptime_)) {
    return;
  }
  if (!v.visitField(3, "flags", flags_)) {
    return;
  }
  if (!v.visitField(4, "value", value_)) {
    return;
  }
}

template <class V>
void McAppendReply::visitFields(V&& v) {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "message", message_)) {
    return;
  }
  if (!v.visitField(3, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class V>
void McAppendReply::visitFields(V&& v) const {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "message", message_)) {
    return;
  }
  if (!v.visitField(3, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class V>
void McPrependRequest::visitFields(V&& v) {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "exptime", exptime_)) {
    return;
  }
  if (!v.visitField(3, "flags", flags_)) {
    return;
  }
  if (!v.visitField(4, "value", value_)) {
    return;
  }
}

template <class V>
void McPrependRequest::visitFields(V&& v) const {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "exptime", exptime_)) {
    return;
  }
  if (!v.visitField(3, "flags", flags_)) {
    return;
  }
  if (!v.visitField(4, "value", value_)) {
    return;
  }
}

template <class V>
void McPrependReply::visitFields(V&& v) {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "message", message_)) {
    return;
  }
  if (!v.visitField(3, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class V>
void McPrependReply::visitFields(V&& v) const {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "message", message_)) {
    return;
  }
  if (!v.visitField(3, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class V>
void McTouchRequest::visitFields(V&& v) {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "exptime", exptime_)) {
    return;
  }
}

template <class V>
void McTouchRequest::visitFields(V&& v) const {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "exptime", exptime_)) {
    return;
  }
}

template <class V>
void McTouchReply::visitFields(V&& v) {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "message", message_)) {
    return;
  }
  if (!v.visitField(3, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class V>
void McTouchReply::visitFields(V&& v) const {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "message", message_)) {
    return;
  }
  if (!v.visitField(3, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class V>
void McFlushReRequest::visitFields(V&& v) {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
}

template <class V>
void McFlushReRequest::visitFields(V&& v) const {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
}

template <class V>
void McFlushReReply::visitFields(V&& v) {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "message", message_)) {
    return;
  }
  if (!v.visitField(3, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class V>
void McFlushReReply::visitFields(V&& v) const {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "message", message_)) {
    return;
  }
  if (!v.visitField(3, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class V>
void McFlushAllRequest::visitFields(V&& v) {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "delay", delay_)) {
    return;
  }
}

template <class V>
void McFlushAllRequest::visitFields(V&& v) const {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "delay", delay_)) {
    return;
  }
}

template <class V>
void McFlushAllReply::visitFields(V&& v) {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "message", message_)) {
    return;
  }
  if (!v.visitField(3, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class V>
void McFlushAllReply::visitFields(V&& v) const {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "message", message_)) {
    return;
  }
  if (!v.visitField(3, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}
} // namespace memcache
} // namespace facebook
