/*
 *  Copyright (c) 2017-present, Facebook, Inc.
 *
 *  This source code is licensed under the MIT license found in the LICENSE
 *  file in the root directory of this source tree.
 *
 */

/*
 *  THIS FILE IS AUTOGENERATED. DO NOT MODIFY IT; ALL CHANGES WILL BE LOST IN
 *  VAIN.
 *
 *  @generated
 */

namespace facebook {
namespace memcache {

template <class Writer>
void McGetRequest::serialize(Writer&& writer) const {
  writer.writeStructBegin();
  writer.writeField(1 /* field id */, key());
  writer.writeField(2 /* field id */, flags());
  writer.writeFieldStop();
  writer.writeStructEnd();
}

template <class V>
void McGetRequest::visitFields(V&& v) {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "flags", flags_)) {
    return;
  }
}

template <class V>
void McGetRequest::visitFields(V&& v) const {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "flags", flags_)) {
    return;
  }
}

template <class Writer>
void McGetReply::serialize(Writer&& writer) const {
  writer.writeStructBegin();
  writer.writeField(1 /* field id */, result());
  writer.writeField(2 /* field id */, value());
  writer.writeField(3 /* field id */, flags());
  writer.writeField(4 /* field id */, message());
  writer.writeField(5 /* field id */, appSpecificErrorCode());
  writer.writeFieldStop();
  writer.writeStructEnd();
}

template <class V>
void McGetReply::visitFields(V&& v) {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "value", value_)) {
    return;
  }
  if (!v.visitField(3, "flags", flags_)) {
    return;
  }
  if (!v.visitField(4, "message", message_)) {
    return;
  }
  if (!v.visitField(5, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class V>
void McGetReply::visitFields(V&& v) const {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "value", value_)) {
    return;
  }
  if (!v.visitField(3, "flags", flags_)) {
    return;
  }
  if (!v.visitField(4, "message", message_)) {
    return;
  }
  if (!v.visitField(5, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class Writer>
void McSetRequest::serialize(Writer&& writer) const {
  writer.writeStructBegin();
  writer.writeField(1 /* field id */, key());
  writer.writeField(2 /* field id */, exptime());
  writer.writeField(3 /* field id */, flags());
  writer.writeField(4 /* field id */, value());
  writer.writeFieldStop();
  writer.writeStructEnd();
}

template <class V>
void McSetRequest::visitFields(V&& v) {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "exptime", exptime_)) {
    return;
  }
  if (!v.visitField(3, "flags", flags_)) {
    return;
  }
  if (!v.visitField(4, "value", value_)) {
    return;
  }
}

template <class V>
void McSetRequest::visitFields(V&& v) const {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "exptime", exptime_)) {
    return;
  }
  if (!v.visitField(3, "flags", flags_)) {
    return;
  }
  if (!v.visitField(4, "value", value_)) {
    return;
  }
}

template <class Writer>
void McSetReply::serialize(Writer&& writer) const {
  writer.writeStructBegin();
  writer.writeField(1 /* field id */, result());
  writer.writeField(2 /* field id */, flags());
  writer.writeField(3 /* field id */, value());
  writer.writeField(4 /* field id */, message());
  writer.writeField(5 /* field id */, appSpecificErrorCode());
  writer.writeFieldStop();
  writer.writeStructEnd();
}

template <class V>
void McSetReply::visitFields(V&& v) {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "flags", flags_)) {
    return;
  }
  if (!v.visitField(3, "value", value_)) {
    return;
  }
  if (!v.visitField(4, "message", message_)) {
    return;
  }
  if (!v.visitField(5, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class V>
void McSetReply::visitFields(V&& v) const {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "flags", flags_)) {
    return;
  }
  if (!v.visitField(3, "value", value_)) {
    return;
  }
  if (!v.visitField(4, "message", message_)) {
    return;
  }
  if (!v.visitField(5, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class Writer>
void McDeleteRequest::serialize(Writer&& writer) const {
  writer.writeStructBegin();
  writer.writeField(1 /* field id */, key());
  writer.writeField(2 /* field id */, flags());
  writer.writeField(3 /* field id */, exptime());
  writer.writeField(4 /* field id */, value());
  writer.writeFieldStop();
  writer.writeStructEnd();
}

template <class V>
void McDeleteRequest::visitFields(V&& v) {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "flags", flags_)) {
    return;
  }
  if (!v.visitField(3, "exptime", exptime_)) {
    return;
  }
  if (!v.visitField(4, "value", value_)) {
    return;
  }
}

template <class V>
void McDeleteRequest::visitFields(V&& v) const {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "flags", flags_)) {
    return;
  }
  if (!v.visitField(3, "exptime", exptime_)) {
    return;
  }
  if (!v.visitField(4, "value", value_)) {
    return;
  }
}

template <class Writer>
void McDeleteReply::serialize(Writer&& writer) const {
  writer.writeStructBegin();
  writer.writeField(1 /* field id */, result());
  writer.writeField(2 /* field id */, flags());
  writer.writeField(3 /* field id */, value());
  writer.writeField(4 /* field id */, message());
  writer.writeField(5 /* field id */, appSpecificErrorCode());
  writer.writeFieldStop();
  writer.writeStructEnd();
}

template <class V>
void McDeleteReply::visitFields(V&& v) {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "flags", flags_)) {
    return;
  }
  if (!v.visitField(3, "value", value_)) {
    return;
  }
  if (!v.visitField(4, "message", message_)) {
    return;
  }
  if (!v.visitField(5, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class V>
void McDeleteReply::visitFields(V&& v) const {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "flags", flags_)) {
    return;
  }
  if (!v.visitField(3, "value", value_)) {
    return;
  }
  if (!v.visitField(4, "message", message_)) {
    return;
  }
  if (!v.visitField(5, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class Writer>
void McLeaseGetRequest::serialize(Writer&& writer) const {
  writer.writeStructBegin();
  writer.writeField(1 /* field id */, key());
  writer.writeField(2 /* field id */, flags());
  writer.writeFieldStop();
  writer.writeStructEnd();
}

template <class V>
void McLeaseGetRequest::visitFields(V&& v) {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "flags", flags_)) {
    return;
  }
}

template <class V>
void McLeaseGetRequest::visitFields(V&& v) const {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "flags", flags_)) {
    return;
  }
}

template <class Writer>
void McLeaseGetReply::serialize(Writer&& writer) const {
  writer.writeStructBegin();
  writer.writeField(1 /* field id */, result());
  writer.writeField(2 /* field id */, leaseToken());
  writer.writeField(3 /* field id */, value());
  writer.writeField(4 /* field id */, flags());
  writer.writeField(5 /* field id */, message());
  writer.writeField(6 /* field id */, appSpecificErrorCode());
  writer.writeFieldStop();
  writer.writeStructEnd();
}

template <class V>
void McLeaseGetReply::visitFields(V&& v) {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "leaseToken", leaseToken_)) {
    return;
  }
  if (!v.visitField(3, "value", value_)) {
    return;
  }
  if (!v.visitField(4, "flags", flags_)) {
    return;
  }
  if (!v.visitField(5, "message", message_)) {
    return;
  }
  if (!v.visitField(6, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class V>
void McLeaseGetReply::visitFields(V&& v) const {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "leaseToken", leaseToken_)) {
    return;
  }
  if (!v.visitField(3, "value", value_)) {
    return;
  }
  if (!v.visitField(4, "flags", flags_)) {
    return;
  }
  if (!v.visitField(5, "message", message_)) {
    return;
  }
  if (!v.visitField(6, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class Writer>
void McLeaseSetRequest::serialize(Writer&& writer) const {
  writer.writeStructBegin();
  writer.writeField(1 /* field id */, key());
  writer.writeField(2 /* field id */, exptime());
  writer.writeField(3 /* field id */, flags());
  writer.writeField(4 /* field id */, value());
  writer.writeField(5 /* field id */, leaseToken());
  writer.writeFieldStop();
  writer.writeStructEnd();
}

template <class V>
void McLeaseSetRequest::visitFields(V&& v) {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "exptime", exptime_)) {
    return;
  }
  if (!v.visitField(3, "flags", flags_)) {
    return;
  }
  if (!v.visitField(4, "value", value_)) {
    return;
  }
  if (!v.visitField(5, "leaseToken", leaseToken_)) {
    return;
  }
}

template <class V>
void McLeaseSetRequest::visitFields(V&& v) const {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "exptime", exptime_)) {
    return;
  }
  if (!v.visitField(3, "flags", flags_)) {
    return;
  }
  if (!v.visitField(4, "value", value_)) {
    return;
  }
  if (!v.visitField(5, "leaseToken", leaseToken_)) {
    return;
  }
}

template <class Writer>
void McLeaseSetReply::serialize(Writer&& writer) const {
  writer.writeStructBegin();
  writer.writeField(1 /* field id */, result());
  writer.writeField(2 /* field id */, message());
  writer.writeField(3 /* field id */, appSpecificErrorCode());
  writer.writeFieldStop();
  writer.writeStructEnd();
}

template <class V>
void McLeaseSetReply::visitFields(V&& v) {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "message", message_)) {
    return;
  }
  if (!v.visitField(3, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class V>
void McLeaseSetReply::visitFields(V&& v) const {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "message", message_)) {
    return;
  }
  if (!v.visitField(3, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class Writer>
void McAddRequest::serialize(Writer&& writer) const {
  writer.writeStructBegin();
  writer.writeField(1 /* field id */, key());
  writer.writeField(2 /* field id */, exptime());
  writer.writeField(3 /* field id */, flags());
  writer.writeField(4 /* field id */, value());
  writer.writeFieldStop();
  writer.writeStructEnd();
}

template <class V>
void McAddRequest::visitFields(V&& v) {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "exptime", exptime_)) {
    return;
  }
  if (!v.visitField(3, "flags", flags_)) {
    return;
  }
  if (!v.visitField(4, "value", value_)) {
    return;
  }
}

template <class V>
void McAddRequest::visitFields(V&& v) const {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "exptime", exptime_)) {
    return;
  }
  if (!v.visitField(3, "flags", flags_)) {
    return;
  }
  if (!v.visitField(4, "value", value_)) {
    return;
  }
}

template <class Writer>
void McAddReply::serialize(Writer&& writer) const {
  writer.writeStructBegin();
  writer.writeField(1 /* field id */, result());
  writer.writeField(2 /* field id */, message());
  writer.writeField(3 /* field id */, appSpecificErrorCode());
  writer.writeFieldStop();
  writer.writeStructEnd();
}

template <class V>
void McAddReply::visitFields(V&& v) {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "message", message_)) {
    return;
  }
  if (!v.visitField(3, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class V>
void McAddReply::visitFields(V&& v) const {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "message", message_)) {
    return;
  }
  if (!v.visitField(3, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class Writer>
void McReplaceRequest::serialize(Writer&& writer) const {
  writer.writeStructBegin();
  writer.writeField(1 /* field id */, key());
  writer.writeField(2 /* field id */, exptime());
  writer.writeField(3 /* field id */, flags());
  writer.writeField(4 /* field id */, value());
  writer.writeFieldStop();
  writer.writeStructEnd();
}

template <class V>
void McReplaceRequest::visitFields(V&& v) {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "exptime", exptime_)) {
    return;
  }
  if (!v.visitField(3, "flags", flags_)) {
    return;
  }
  if (!v.visitField(4, "value", value_)) {
    return;
  }
}

template <class V>
void McReplaceRequest::visitFields(V&& v) const {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "exptime", exptime_)) {
    return;
  }
  if (!v.visitField(3, "flags", flags_)) {
    return;
  }
  if (!v.visitField(4, "value", value_)) {
    return;
  }
}

template <class Writer>
void McReplaceReply::serialize(Writer&& writer) const {
  writer.writeStructBegin();
  writer.writeField(1 /* field id */, result());
  writer.writeField(2 /* field id */, message());
  writer.writeField(3 /* field id */, appSpecificErrorCode());
  writer.writeFieldStop();
  writer.writeStructEnd();
}

template <class V>
void McReplaceReply::visitFields(V&& v) {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "message", message_)) {
    return;
  }
  if (!v.visitField(3, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class V>
void McReplaceReply::visitFields(V&& v) const {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "message", message_)) {
    return;
  }
  if (!v.visitField(3, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class Writer>
void McGetsRequest::serialize(Writer&& writer) const {
  writer.writeStructBegin();
  writer.writeField(1 /* field id */, key());
  writer.writeFieldStop();
  writer.writeStructEnd();
}

template <class V>
void McGetsRequest::visitFields(V&& v) {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
}

template <class V>
void McGetsRequest::visitFields(V&& v) const {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
}

template <class Writer>
void McGetsReply::serialize(Writer&& writer) const {
  writer.writeStructBegin();
  writer.writeField(1 /* field id */, result());
  writer.writeField(2 /* field id */, casToken());
  writer.writeField(3 /* field id */, value());
  writer.writeField(4 /* field id */, flags());
  writer.writeField(5 /* field id */, message());
  writer.writeField(6 /* field id */, appSpecificErrorCode());
  writer.writeFieldStop();
  writer.writeStructEnd();
}

template <class V>
void McGetsReply::visitFields(V&& v) {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "casToken", casToken_)) {
    return;
  }
  if (!v.visitField(3, "value", value_)) {
    return;
  }
  if (!v.visitField(4, "flags", flags_)) {
    return;
  }
  if (!v.visitField(5, "message", message_)) {
    return;
  }
  if (!v.visitField(6, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class V>
void McGetsReply::visitFields(V&& v) const {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "casToken", casToken_)) {
    return;
  }
  if (!v.visitField(3, "value", value_)) {
    return;
  }
  if (!v.visitField(4, "flags", flags_)) {
    return;
  }
  if (!v.visitField(5, "message", message_)) {
    return;
  }
  if (!v.visitField(6, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class Writer>
void McCasRequest::serialize(Writer&& writer) const {
  writer.writeStructBegin();
  writer.writeField(1 /* field id */, key());
  writer.writeField(2 /* field id */, exptime());
  writer.writeField(3 /* field id */, flags());
  writer.writeField(4 /* field id */, value());
  writer.writeField(5 /* field id */, casToken());
  writer.writeFieldStop();
  writer.writeStructEnd();
}

template <class V>
void McCasRequest::visitFields(V&& v) {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "exptime", exptime_)) {
    return;
  }
  if (!v.visitField(3, "flags", flags_)) {
    return;
  }
  if (!v.visitField(4, "value", value_)) {
    return;
  }
  if (!v.visitField(5, "casToken", casToken_)) {
    return;
  }
}

template <class V>
void McCasRequest::visitFields(V&& v) const {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "exptime", exptime_)) {
    return;
  }
  if (!v.visitField(3, "flags", flags_)) {
    return;
  }
  if (!v.visitField(4, "value", value_)) {
    return;
  }
  if (!v.visitField(5, "casToken", casToken_)) {
    return;
  }
}

template <class Writer>
void McCasReply::serialize(Writer&& writer) const {
  writer.writeStructBegin();
  writer.writeField(1 /* field id */, result());
  writer.writeField(2 /* field id */, message());
  writer.writeField(3 /* field id */, appSpecificErrorCode());
  writer.writeFieldStop();
  writer.writeStructEnd();
}

template <class V>
void McCasReply::visitFields(V&& v) {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "message", message_)) {
    return;
  }
  if (!v.visitField(3, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class V>
void McCasReply::visitFields(V&& v) const {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "message", message_)) {
    return;
  }
  if (!v.visitField(3, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class Writer>
void McIncrRequest::serialize(Writer&& writer) const {
  writer.writeStructBegin();
  writer.writeField(1 /* field id */, key());
  writer.writeField(2 /* field id */, delta());
  writer.writeFieldStop();
  writer.writeStructEnd();
}

template <class V>
void McIncrRequest::visitFields(V&& v) {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "delta", delta_)) {
    return;
  }
}

template <class V>
void McIncrRequest::visitFields(V&& v) const {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "delta", delta_)) {
    return;
  }
}

template <class Writer>
void McIncrReply::serialize(Writer&& writer) const {
  writer.writeStructBegin();
  writer.writeField(1 /* field id */, result());
  writer.writeField(2 /* field id */, delta());
  writer.writeField(3 /* field id */, message());
  writer.writeField(4 /* field id */, appSpecificErrorCode());
  writer.writeFieldStop();
  writer.writeStructEnd();
}

template <class V>
void McIncrReply::visitFields(V&& v) {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "delta", delta_)) {
    return;
  }
  if (!v.visitField(3, "message", message_)) {
    return;
  }
  if (!v.visitField(4, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class V>
void McIncrReply::visitFields(V&& v) const {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "delta", delta_)) {
    return;
  }
  if (!v.visitField(3, "message", message_)) {
    return;
  }
  if (!v.visitField(4, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class Writer>
void McDecrRequest::serialize(Writer&& writer) const {
  writer.writeStructBegin();
  writer.writeField(1 /* field id */, key());
  writer.writeField(2 /* field id */, delta());
  writer.writeFieldStop();
  writer.writeStructEnd();
}

template <class V>
void McDecrRequest::visitFields(V&& v) {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "delta", delta_)) {
    return;
  }
}

template <class V>
void McDecrRequest::visitFields(V&& v) const {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "delta", delta_)) {
    return;
  }
}

template <class Writer>
void McDecrReply::serialize(Writer&& writer) const {
  writer.writeStructBegin();
  writer.writeField(1 /* field id */, result());
  writer.writeField(2 /* field id */, delta());
  writer.writeField(3 /* field id */, message());
  writer.writeField(4 /* field id */, appSpecificErrorCode());
  writer.writeFieldStop();
  writer.writeStructEnd();
}

template <class V>
void McDecrReply::visitFields(V&& v) {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "delta", delta_)) {
    return;
  }
  if (!v.visitField(3, "message", message_)) {
    return;
  }
  if (!v.visitField(4, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class V>
void McDecrReply::visitFields(V&& v) const {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "delta", delta_)) {
    return;
  }
  if (!v.visitField(3, "message", message_)) {
    return;
  }
  if (!v.visitField(4, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class Writer>
void McMetagetRequest::serialize(Writer&& writer) const {
  writer.writeStructBegin();
  writer.writeField(1 /* field id */, key());
  writer.writeFieldStop();
  writer.writeStructEnd();
}

template <class V>
void McMetagetRequest::visitFields(V&& v) {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
}

template <class V>
void McMetagetRequest::visitFields(V&& v) const {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
}

template <class Writer>
void McMetagetReply::serialize(Writer&& writer) const {
  writer.writeStructBegin();
  writer.writeField(1 /* field id */, result());
  writer.writeField(2 /* field id */, age());
  writer.writeField(3 /* field id */, exptime());
  writer.writeField(4 /* field id */, ipv());
  writer.writeField(5 /* field id */, ipAddress());
  writer.writeField(6 /* field id */, message());
  writer.writeField(7 /* field id */, appSpecificErrorCode());
  writer.writeFieldStop();
  writer.writeStructEnd();
}

template <class V>
void McMetagetReply::visitFields(V&& v) {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "age", age_)) {
    return;
  }
  if (!v.visitField(3, "exptime", exptime_)) {
    return;
  }
  if (!v.visitField(4, "ipv", ipv_)) {
    return;
  }
  if (!v.visitField(5, "ipAddress", ipAddress_)) {
    return;
  }
  if (!v.visitField(6, "message", message_)) {
    return;
  }
  if (!v.visitField(7, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class V>
void McMetagetReply::visitFields(V&& v) const {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "age", age_)) {
    return;
  }
  if (!v.visitField(3, "exptime", exptime_)) {
    return;
  }
  if (!v.visitField(4, "ipv", ipv_)) {
    return;
  }
  if (!v.visitField(5, "ipAddress", ipAddress_)) {
    return;
  }
  if (!v.visitField(6, "message", message_)) {
    return;
  }
  if (!v.visitField(7, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class Writer>
void McAppendRequest::serialize(Writer&& writer) const {
  writer.writeStructBegin();
  writer.writeField(1 /* field id */, key());
  writer.writeField(2 /* field id */, exptime());
  writer.writeField(3 /* field id */, flags());
  writer.writeField(4 /* field id */, value());
  writer.writeFieldStop();
  writer.writeStructEnd();
}

template <class V>
void McAppendRequest::visitFields(V&& v) {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "exptime", exptime_)) {
    return;
  }
  if (!v.visitField(3, "flags", flags_)) {
    return;
  }
  if (!v.visitField(4, "value", value_)) {
    return;
  }
}

template <class V>
void McAppendRequest::visitFields(V&& v) const {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "exptime", exptime_)) {
    return;
  }
  if (!v.visitField(3, "flags", flags_)) {
    return;
  }
  if (!v.visitField(4, "value", value_)) {
    return;
  }
}

template <class Writer>
void McAppendReply::serialize(Writer&& writer) const {
  writer.writeStructBegin();
  writer.writeField(1 /* field id */, result());
  writer.writeField(2 /* field id */, message());
  writer.writeField(3 /* field id */, appSpecificErrorCode());
  writer.writeFieldStop();
  writer.writeStructEnd();
}

template <class V>
void McAppendReply::visitFields(V&& v) {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "message", message_)) {
    return;
  }
  if (!v.visitField(3, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class V>
void McAppendReply::visitFields(V&& v) const {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "message", message_)) {
    return;
  }
  if (!v.visitField(3, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class Writer>
void McPrependRequest::serialize(Writer&& writer) const {
  writer.writeStructBegin();
  writer.writeField(1 /* field id */, key());
  writer.writeField(2 /* field id */, exptime());
  writer.writeField(3 /* field id */, flags());
  writer.writeField(4 /* field id */, value());
  writer.writeFieldStop();
  writer.writeStructEnd();
}

template <class V>
void McPrependRequest::visitFields(V&& v) {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "exptime", exptime_)) {
    return;
  }
  if (!v.visitField(3, "flags", flags_)) {
    return;
  }
  if (!v.visitField(4, "value", value_)) {
    return;
  }
}

template <class V>
void McPrependRequest::visitFields(V&& v) const {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "exptime", exptime_)) {
    return;
  }
  if (!v.visitField(3, "flags", flags_)) {
    return;
  }
  if (!v.visitField(4, "value", value_)) {
    return;
  }
}

template <class Writer>
void McPrependReply::serialize(Writer&& writer) const {
  writer.writeStructBegin();
  writer.writeField(1 /* field id */, result());
  writer.writeField(2 /* field id */, message());
  writer.writeField(3 /* field id */, appSpecificErrorCode());
  writer.writeFieldStop();
  writer.writeStructEnd();
}

template <class V>
void McPrependReply::visitFields(V&& v) {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "message", message_)) {
    return;
  }
  if (!v.visitField(3, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class V>
void McPrependReply::visitFields(V&& v) const {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "message", message_)) {
    return;
  }
  if (!v.visitField(3, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class Writer>
void McTouchRequest::serialize(Writer&& writer) const {
  writer.writeStructBegin();
  writer.writeField(1 /* field id */, key());
  writer.writeField(2 /* field id */, exptime());
  writer.writeFieldStop();
  writer.writeStructEnd();
}

template <class V>
void McTouchRequest::visitFields(V&& v) {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "exptime", exptime_)) {
    return;
  }
}

template <class V>
void McTouchRequest::visitFields(V&& v) const {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "exptime", exptime_)) {
    return;
  }
}

template <class Writer>
void McTouchReply::serialize(Writer&& writer) const {
  writer.writeStructBegin();
  writer.writeField(1 /* field id */, result());
  writer.writeField(2 /* field id */, message());
  writer.writeField(3 /* field id */, appSpecificErrorCode());
  writer.writeFieldStop();
  writer.writeStructEnd();
}

template <class V>
void McTouchReply::visitFields(V&& v) {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "message", message_)) {
    return;
  }
  if (!v.visitField(3, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class V>
void McTouchReply::visitFields(V&& v) const {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "message", message_)) {
    return;
  }
  if (!v.visitField(3, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class Writer>
void McFlushReRequest::serialize(Writer&& writer) const {
  writer.writeStructBegin();
  writer.writeField(1 /* field id */, key());
  writer.writeFieldStop();
  writer.writeStructEnd();
}

template <class V>
void McFlushReRequest::visitFields(V&& v) {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
}

template <class V>
void McFlushReRequest::visitFields(V&& v) const {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
}

template <class Writer>
void McFlushReReply::serialize(Writer&& writer) const {
  writer.writeStructBegin();
  writer.writeField(1 /* field id */, result());
  writer.writeField(2 /* field id */, message());
  writer.writeField(3 /* field id */, appSpecificErrorCode());
  writer.writeFieldStop();
  writer.writeStructEnd();
}

template <class V>
void McFlushReReply::visitFields(V&& v) {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "message", message_)) {
    return;
  }
  if (!v.visitField(3, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class V>
void McFlushReReply::visitFields(V&& v) const {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "message", message_)) {
    return;
  }
  if (!v.visitField(3, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class Writer>
void McFlushAllRequest::serialize(Writer&& writer) const {
  writer.writeStructBegin();
  writer.writeField(1 /* field id */, key());
  writer.writeField(2 /* field id */, delay());
  writer.writeFieldStop();
  writer.writeStructEnd();
}

template <class V>
void McFlushAllRequest::visitFields(V&& v) {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "delay", delay_)) {
    return;
  }
}

template <class V>
void McFlushAllRequest::visitFields(V&& v) const {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "delay", delay_)) {
    return;
  }
}

template <class Writer>
void McFlushAllReply::serialize(Writer&& writer) const {
  writer.writeStructBegin();
  writer.writeField(1 /* field id */, result());
  writer.writeField(2 /* field id */, message());
  writer.writeField(3 /* field id */, appSpecificErrorCode());
  writer.writeFieldStop();
  writer.writeStructEnd();
}

template <class V>
void McFlushAllReply::visitFields(V&& v) {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "message", message_)) {
    return;
  }
  if (!v.visitField(3, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class V>
void McFlushAllReply::visitFields(V&& v) const {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "message", message_)) {
    return;
  }
  if (!v.visitField(3, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class Writer>
void McGatRequest::serialize(Writer&& writer) const {
  writer.writeStructBegin();
  writer.writeField(1 /* field id */, exptime());
  writer.writeField(2 /* field id */, key());
  writer.writeFieldStop();
  writer.writeStructEnd();
}

template <class V>
void McGatRequest::visitFields(V&& v) {
  if (!v.visitField(1, "exptime", exptime_)) {
    return;
  }
  if (!v.visitField(2, "key", key_)) {
    return;
  }
}

template <class V>
void McGatRequest::visitFields(V&& v) const {
  if (!v.visitField(1, "exptime", exptime_)) {
    return;
  }
  if (!v.visitField(2, "key", key_)) {
    return;
  }
}

template <class Writer>
void McGatReply::serialize(Writer&& writer) const {
  writer.writeStructBegin();
  writer.writeField(1 /* field id */, result());
  writer.writeField(2 /* field id */, value());
  writer.writeField(3 /* field id */, flags());
  writer.writeField(4 /* field id */, message());
  writer.writeField(5 /* field id */, appSpecificErrorCode());
  writer.writeFieldStop();
  writer.writeStructEnd();
}

template <class V>
void McGatReply::visitFields(V&& v) {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "value", value_)) {
    return;
  }
  if (!v.visitField(3, "flags", flags_)) {
    return;
  }
  if (!v.visitField(4, "message", message_)) {
    return;
  }
  if (!v.visitField(5, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class V>
void McGatReply::visitFields(V&& v) const {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "value", value_)) {
    return;
  }
  if (!v.visitField(3, "flags", flags_)) {
    return;
  }
  if (!v.visitField(4, "message", message_)) {
    return;
  }
  if (!v.visitField(5, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class Writer>
void McGatsRequest::serialize(Writer&& writer) const {
  writer.writeStructBegin();
  writer.writeField(1 /* field id */, exptime());
  writer.writeField(2 /* field id */, key());
  writer.writeFieldStop();
  writer.writeStructEnd();
}

template <class V>
void McGatsRequest::visitFields(V&& v) {
  if (!v.visitField(1, "exptime", exptime_)) {
    return;
  }
  if (!v.visitField(2, "key", key_)) {
    return;
  }
}

template <class V>
void McGatsRequest::visitFields(V&& v) const {
  if (!v.visitField(1, "exptime", exptime_)) {
    return;
  }
  if (!v.visitField(2, "key", key_)) {
    return;
  }
}

template <class Writer>
void McGatsReply::serialize(Writer&& writer) const {
  writer.writeStructBegin();
  writer.writeField(1 /* field id */, result());
  writer.writeField(2 /* field id */, casToken());
  writer.writeField(3 /* field id */, value());
  writer.writeField(4 /* field id */, flags());
  writer.writeField(5 /* field id */, message());
  writer.writeField(6 /* field id */, appSpecificErrorCode());
  writer.writeFieldStop();
  writer.writeStructEnd();
}

template <class V>
void McGatsReply::visitFields(V&& v) {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "casToken", casToken_)) {
    return;
  }
  if (!v.visitField(3, "value", value_)) {
    return;
  }
  if (!v.visitField(4, "flags", flags_)) {
    return;
  }
  if (!v.visitField(5, "message", message_)) {
    return;
  }
  if (!v.visitField(6, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}

template <class V>
void McGatsReply::visitFields(V&& v) const {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "casToken", casToken_)) {
    return;
  }
  if (!v.visitField(3, "value", value_)) {
    return;
  }
  if (!v.visitField(4, "flags", flags_)) {
    return;
  }
  if (!v.visitField(5, "message", message_)) {
    return;
  }
  if (!v.visitField(6, "appSpecificErrorCode", appSpecificErrorCode_)) {
    return;
  }
}
} // namespace memcache
} // namespace facebook
