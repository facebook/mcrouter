/*
 *  Copyright (c) 2017-present, Facebook, Inc.
 *
 *  This source code is licensed under the MIT license found in the LICENSE
 *  file in the root directory of this source tree.
 *
 */

/*
 *  THIS FILE IS AUTOGENERATED. DO NOT MODIFY IT; ALL CHANGES WILL BE LOST IN
 *  VAIN.
 *
 *  @generated
 */
#pragma once

#include <memory>
#include <string>
#include <utility>

#include <folly/Optional.h>
#include <folly/io/IOBuf.h>
#include <mcrouter/lib/carbon/CarbonProtocolReader.h>
#include <mcrouter/lib/carbon/CommonSerializationTraits.h>
#include <mcrouter/lib/carbon/Keys.h>
#include <mcrouter/lib/carbon/ReplyCommon.h>
#include <mcrouter/lib/carbon/RequestCommon.h>
#include <mcrouter/lib/carbon/RequestReplyUtil.h>
#include <mcrouter/lib/carbon/Result.h>
#include <mcrouter/lib/carbon/TypeList.h>
#include <mcrouter/lib/carbon/Variant.h>

#include "mcrouter/lib/network/gen/gen-cpp2/Common_types.h"

namespace facebook {
namespace memcache {

class McVersionReply;

class McVersionRequest : public carbon::RequestCommon {
 public:
  using reply_type = McVersionReply;
  static constexpr bool hasExptime = false;
  static constexpr bool hasFlags = false;
  static constexpr bool hasKey = true;
  static constexpr bool hasValue = false;
  static constexpr size_t typeId = 25;
  static constexpr const char* name = "version";

  McVersionRequest() = default;
  McVersionRequest(const McVersionRequest&) = default;
  McVersionRequest& operator=(const McVersionRequest&) = default;
  McVersionRequest(McVersionRequest&&) = default;
  McVersionRequest& operator=(McVersionRequest&&) = default;
  explicit McVersionRequest(folly::StringPiece sp) {
    underlyingThriftStruct_.key = sp;
  }
  explicit McVersionRequest(folly::IOBuf&& carbonKey) {
    underlyingThriftStruct_.key = std::move(carbonKey);
  }

  const carbon::Keys<folly::IOBuf>& key() const {
    return underlyingThriftStruct_.key;
  }
  carbon::Keys<folly::IOBuf>& key() {
    markBufferAsDirty();
    return underlyingThriftStruct_.key;
  }
  uint64_t flags() const {
    return 0;
  }
  int32_t exptime() const {
    return 0;
  }
  const facebook::memcache::thrift::McVersionRequest& getThriftStruct() const {
    return underlyingThriftStruct_;
  }
  facebook::memcache::thrift::McVersionRequest& getThriftStruct() {
    markBufferAsDirty();
    return underlyingThriftStruct_;
  }

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  // Methods for Thrift interoperability, note that the methods work with Thrift
  // protocols and not Carbon protocol.
  void __clear() {
    underlyingThriftStruct_.__clear();
  }
  template <class Protocol>
  uint32_t write(Protocol* protocol) const {
    return underlyingThriftStruct_.write(protocol);
  }
  template <class Protocol>
  uint32_t serializedSize(Protocol* protocol) const {
    return underlyingThriftStruct_.serializedSize(protocol);
  }
  template <class Protocol>
  uint32_t serializedSizeZC(Protocol* protocol) const {
    return underlyingThriftStruct_.serializedSizeZC(protocol);
  }
 private:
  template <class Protocol>
  void readNoXfer(Protocol* protocol) {
    underlyingThriftStruct_.read(protocol);
  }

  friend class apache::thrift::Cpp2Ops<McVersionRequest>;

 private:
  facebook::memcache::thrift::McVersionRequest underlyingThriftStruct_;
};

class McVersionReply : public carbon::ReplyCommon {
 public:
  static constexpr bool hasExptime = false;
  static constexpr bool hasFlags = false;
  static constexpr bool hasKey = false;
  static constexpr bool hasValue = true;
  static constexpr size_t typeId = 26;

  McVersionReply() = default;
  McVersionReply(const McVersionReply&) = default;
  McVersionReply& operator=(const McVersionReply&) = default;
  McVersionReply(McVersionReply&&) = default;
  McVersionReply& operator=(McVersionReply&&) = default;
  explicit McVersionReply(carbon::Result carbonResult) {
    underlyingThriftStruct_.result = carbonResult;
  }

  carbon::Result result() const {
    return underlyingThriftStruct_.result;
  }
  carbon::Result& result() {
    return underlyingThriftStruct_.result;
  }
  const folly::IOBuf& value() const {
    return underlyingThriftStruct_.value;
  }
  folly::IOBuf& value() {
    return underlyingThriftStruct_.value;
  }
  const std::string& message() const {
    return underlyingThriftStruct_.message;
  }
  std::string& message() {
    return underlyingThriftStruct_.message;
  }
  int16_t appSpecificErrorCode() const {
    return underlyingThriftStruct_.appSpecificErrorCode;
  }
  int16_t& appSpecificErrorCode() {
    return underlyingThriftStruct_.appSpecificErrorCode;
  }
  uint64_t flags() const {
    return 0;
  }
  int32_t exptime() const {
    return 0;
  }
  const facebook::memcache::thrift::McVersionReply& getThriftStruct() const {
    return underlyingThriftStruct_;
  }
  facebook::memcache::thrift::McVersionReply& getThriftStruct() {
    return underlyingThriftStruct_;
  }

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  // Methods for Thrift interoperability, note that the methods work with Thrift
  // protocols and not Carbon protocol.
  void __clear() {
    underlyingThriftStruct_.__clear();
  }
  template <class Protocol>
  uint32_t write(Protocol* protocol) const {
    return underlyingThriftStruct_.write(protocol);
  }
  template <class Protocol>
  uint32_t serializedSize(Protocol* protocol) const {
    return underlyingThriftStruct_.serializedSize(protocol);
  }
  template <class Protocol>
  uint32_t serializedSizeZC(Protocol* protocol) const {
    return underlyingThriftStruct_.serializedSizeZC(protocol);
  }
 private:
  template <class Protocol>
  void readNoXfer(Protocol* protocol) {
    underlyingThriftStruct_.read(protocol);
  }

  friend class apache::thrift::Cpp2Ops<McVersionReply>;

 private:
  facebook::memcache::thrift::McVersionReply underlyingThriftStruct_;
};

class McStatsReply;

class McStatsRequest : public carbon::RequestCommon {
 public:
  using reply_type = McStatsReply;
  static constexpr bool hasExptime = false;
  static constexpr bool hasFlags = false;
  static constexpr bool hasKey = true;
  static constexpr bool hasValue = false;
  static constexpr size_t typeId = 33;
  static constexpr const char* name = "stats";

  McStatsRequest() = default;
  McStatsRequest(const McStatsRequest&) = default;
  McStatsRequest& operator=(const McStatsRequest&) = default;
  McStatsRequest(McStatsRequest&&) = default;
  McStatsRequest& operator=(McStatsRequest&&) = default;
  explicit McStatsRequest(folly::StringPiece sp) {
    underlyingThriftStruct_.key = sp;
  }
  explicit McStatsRequest(folly::IOBuf&& carbonKey) {
    underlyingThriftStruct_.key = std::move(carbonKey);
  }

  const carbon::Keys<folly::IOBuf>& key() const {
    return underlyingThriftStruct_.key;
  }
  carbon::Keys<folly::IOBuf>& key() {
    markBufferAsDirty();
    return underlyingThriftStruct_.key;
  }
  uint64_t flags() const {
    return 0;
  }
  int32_t exptime() const {
    return 0;
  }
  const facebook::memcache::thrift::McStatsRequest& getThriftStruct() const {
    return underlyingThriftStruct_;
  }
  facebook::memcache::thrift::McStatsRequest& getThriftStruct() {
    markBufferAsDirty();
    return underlyingThriftStruct_;
  }

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  // Methods for Thrift interoperability, note that the methods work with Thrift
  // protocols and not Carbon protocol.
  void __clear() {
    underlyingThriftStruct_.__clear();
  }
  template <class Protocol>
  uint32_t write(Protocol* protocol) const {
    return underlyingThriftStruct_.write(protocol);
  }
  template <class Protocol>
  uint32_t serializedSize(Protocol* protocol) const {
    return underlyingThriftStruct_.serializedSize(protocol);
  }
  template <class Protocol>
  uint32_t serializedSizeZC(Protocol* protocol) const {
    return underlyingThriftStruct_.serializedSizeZC(protocol);
  }
 private:
  template <class Protocol>
  void readNoXfer(Protocol* protocol) {
    underlyingThriftStruct_.read(protocol);
  }

  friend class apache::thrift::Cpp2Ops<McStatsRequest>;

 private:
  facebook::memcache::thrift::McStatsRequest underlyingThriftStruct_;
};

class McStatsReply : public carbon::ReplyCommon {
 public:
  static constexpr bool hasExptime = false;
  static constexpr bool hasFlags = false;
  static constexpr bool hasKey = false;
  static constexpr bool hasValue = false;
  static constexpr size_t typeId = 34;

  McStatsReply() = default;
  McStatsReply(const McStatsReply&) = default;
  McStatsReply& operator=(const McStatsReply&) = default;
  McStatsReply(McStatsReply&&) = default;
  McStatsReply& operator=(McStatsReply&&) = default;
  explicit McStatsReply(carbon::Result carbonResult) {
    underlyingThriftStruct_.result = carbonResult;
  }

  carbon::Result result() const {
    return underlyingThriftStruct_.result;
  }
  carbon::Result& result() {
    return underlyingThriftStruct_.result;
  }
  const std::string& message() const {
    return underlyingThriftStruct_.message;
  }
  std::string& message() {
    return underlyingThriftStruct_.message;
  }
  const std::vector<std::string>& stats() const {
    return underlyingThriftStruct_.stats;
  }
  std::vector<std::string>& stats() {
    return underlyingThriftStruct_.stats;
  }
  int16_t appSpecificErrorCode() const {
    return underlyingThriftStruct_.appSpecificErrorCode;
  }
  int16_t& appSpecificErrorCode() {
    return underlyingThriftStruct_.appSpecificErrorCode;
  }
  uint64_t flags() const {
    return 0;
  }
  int32_t exptime() const {
    return 0;
  }
  const facebook::memcache::thrift::McStatsReply& getThriftStruct() const {
    return underlyingThriftStruct_;
  }
  facebook::memcache::thrift::McStatsReply& getThriftStruct() {
    return underlyingThriftStruct_;
  }

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  // Methods for Thrift interoperability, note that the methods work with Thrift
  // protocols and not Carbon protocol.
  void __clear() {
    underlyingThriftStruct_.__clear();
  }
  template <class Protocol>
  uint32_t write(Protocol* protocol) const {
    return underlyingThriftStruct_.write(protocol);
  }
  template <class Protocol>
  uint32_t serializedSize(Protocol* protocol) const {
    return underlyingThriftStruct_.serializedSize(protocol);
  }
  template <class Protocol>
  uint32_t serializedSizeZC(Protocol* protocol) const {
    return underlyingThriftStruct_.serializedSizeZC(protocol);
  }
 private:
  template <class Protocol>
  void readNoXfer(Protocol* protocol) {
    underlyingThriftStruct_.read(protocol);
  }

  friend class apache::thrift::Cpp2Ops<McStatsReply>;

 private:
  facebook::memcache::thrift::McStatsReply underlyingThriftStruct_;
};

class McShutdownReply;

class McShutdownRequest : public carbon::RequestCommon {
 public:
  using reply_type = McShutdownReply;
  static constexpr bool hasExptime = false;
  static constexpr bool hasFlags = false;
  static constexpr bool hasKey = true;
  static constexpr bool hasValue = false;
  static constexpr size_t typeId = 35;
  static constexpr const char* name = "shutdown";

  McShutdownRequest() = default;
  McShutdownRequest(const McShutdownRequest&) = default;
  McShutdownRequest& operator=(const McShutdownRequest&) = default;
  McShutdownRequest(McShutdownRequest&&) = default;
  McShutdownRequest& operator=(McShutdownRequest&&) = default;
  explicit McShutdownRequest(folly::StringPiece sp) {
    underlyingThriftStruct_.key = sp;
  }
  explicit McShutdownRequest(folly::IOBuf&& carbonKey) {
    underlyingThriftStruct_.key = std::move(carbonKey);
  }

  const carbon::Keys<folly::IOBuf>& key() const {
    return underlyingThriftStruct_.key;
  }
  carbon::Keys<folly::IOBuf>& key() {
    markBufferAsDirty();
    return underlyingThriftStruct_.key;
  }
  uint64_t flags() const {
    return 0;
  }
  int32_t exptime() const {
    return 0;
  }
  const facebook::memcache::thrift::McShutdownRequest& getThriftStruct() const {
    return underlyingThriftStruct_;
  }
  facebook::memcache::thrift::McShutdownRequest& getThriftStruct() {
    markBufferAsDirty();
    return underlyingThriftStruct_;
  }

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  // Methods for Thrift interoperability, note that the methods work with Thrift
  // protocols and not Carbon protocol.
  void __clear() {
    underlyingThriftStruct_.__clear();
  }
  template <class Protocol>
  uint32_t write(Protocol* protocol) const {
    return underlyingThriftStruct_.write(protocol);
  }
  template <class Protocol>
  uint32_t serializedSize(Protocol* protocol) const {
    return underlyingThriftStruct_.serializedSize(protocol);
  }
  template <class Protocol>
  uint32_t serializedSizeZC(Protocol* protocol) const {
    return underlyingThriftStruct_.serializedSizeZC(protocol);
  }
 private:
  template <class Protocol>
  void readNoXfer(Protocol* protocol) {
    underlyingThriftStruct_.read(protocol);
  }

  friend class apache::thrift::Cpp2Ops<McShutdownRequest>;

 private:
  facebook::memcache::thrift::McShutdownRequest underlyingThriftStruct_;
};

class McShutdownReply : public carbon::ReplyCommon {
 public:
  static constexpr bool hasExptime = false;
  static constexpr bool hasFlags = false;
  static constexpr bool hasKey = false;
  static constexpr bool hasValue = false;
  static constexpr size_t typeId = 36;

  McShutdownReply() = default;
  McShutdownReply(const McShutdownReply&) = default;
  McShutdownReply& operator=(const McShutdownReply&) = default;
  McShutdownReply(McShutdownReply&&) = default;
  McShutdownReply& operator=(McShutdownReply&&) = default;
  explicit McShutdownReply(carbon::Result carbonResult) {
    underlyingThriftStruct_.result = carbonResult;
  }

  carbon::Result result() const {
    return underlyingThriftStruct_.result;
  }
  carbon::Result& result() {
    return underlyingThriftStruct_.result;
  }
  const std::string& message() const {
    return underlyingThriftStruct_.message;
  }
  std::string& message() {
    return underlyingThriftStruct_.message;
  }
  int16_t appSpecificErrorCode() const {
    return underlyingThriftStruct_.appSpecificErrorCode;
  }
  int16_t& appSpecificErrorCode() {
    return underlyingThriftStruct_.appSpecificErrorCode;
  }
  uint64_t flags() const {
    return 0;
  }
  int32_t exptime() const {
    return 0;
  }
  const facebook::memcache::thrift::McShutdownReply& getThriftStruct() const {
    return underlyingThriftStruct_;
  }
  facebook::memcache::thrift::McShutdownReply& getThriftStruct() {
    return underlyingThriftStruct_;
  }

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  // Methods for Thrift interoperability, note that the methods work with Thrift
  // protocols and not Carbon protocol.
  void __clear() {
    underlyingThriftStruct_.__clear();
  }
  template <class Protocol>
  uint32_t write(Protocol* protocol) const {
    return underlyingThriftStruct_.write(protocol);
  }
  template <class Protocol>
  uint32_t serializedSize(Protocol* protocol) const {
    return underlyingThriftStruct_.serializedSize(protocol);
  }
  template <class Protocol>
  uint32_t serializedSizeZC(Protocol* protocol) const {
    return underlyingThriftStruct_.serializedSizeZC(protocol);
  }
 private:
  template <class Protocol>
  void readNoXfer(Protocol* protocol) {
    underlyingThriftStruct_.read(protocol);
  }

  friend class apache::thrift::Cpp2Ops<McShutdownReply>;

 private:
  facebook::memcache::thrift::McShutdownReply underlyingThriftStruct_;
};

class McQuitReply;

class McQuitRequest : public carbon::RequestCommon {
 public:
  using reply_type = McQuitReply;
  static constexpr bool hasExptime = false;
  static constexpr bool hasFlags = false;
  static constexpr bool hasKey = true;
  static constexpr bool hasValue = false;
  static constexpr size_t typeId = 37;
  static constexpr const char* name = "quit";

  McQuitRequest() = default;
  McQuitRequest(const McQuitRequest&) = default;
  McQuitRequest& operator=(const McQuitRequest&) = default;
  McQuitRequest(McQuitRequest&&) = default;
  McQuitRequest& operator=(McQuitRequest&&) = default;
  explicit McQuitRequest(folly::StringPiece sp) {
    underlyingThriftStruct_.key = sp;
  }
  explicit McQuitRequest(folly::IOBuf&& carbonKey) {
    underlyingThriftStruct_.key = std::move(carbonKey);
  }

  const carbon::Keys<folly::IOBuf>& key() const {
    return underlyingThriftStruct_.key;
  }
  carbon::Keys<folly::IOBuf>& key() {
    markBufferAsDirty();
    return underlyingThriftStruct_.key;
  }
  uint64_t flags() const {
    return 0;
  }
  int32_t exptime() const {
    return 0;
  }
  const facebook::memcache::thrift::McQuitRequest& getThriftStruct() const {
    return underlyingThriftStruct_;
  }
  facebook::memcache::thrift::McQuitRequest& getThriftStruct() {
    markBufferAsDirty();
    return underlyingThriftStruct_;
  }

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  // Methods for Thrift interoperability, note that the methods work with Thrift
  // protocols and not Carbon protocol.
  void __clear() {
    underlyingThriftStruct_.__clear();
  }
  template <class Protocol>
  uint32_t write(Protocol* protocol) const {
    return underlyingThriftStruct_.write(protocol);
  }
  template <class Protocol>
  uint32_t serializedSize(Protocol* protocol) const {
    return underlyingThriftStruct_.serializedSize(protocol);
  }
  template <class Protocol>
  uint32_t serializedSizeZC(Protocol* protocol) const {
    return underlyingThriftStruct_.serializedSizeZC(protocol);
  }
 private:
  template <class Protocol>
  void readNoXfer(Protocol* protocol) {
    underlyingThriftStruct_.read(protocol);
  }

  friend class apache::thrift::Cpp2Ops<McQuitRequest>;

 private:
  facebook::memcache::thrift::McQuitRequest underlyingThriftStruct_;
};

class McQuitReply : public carbon::ReplyCommon {
 public:
  static constexpr bool hasExptime = false;
  static constexpr bool hasFlags = false;
  static constexpr bool hasKey = false;
  static constexpr bool hasValue = false;
  static constexpr size_t typeId = 38;

  McQuitReply() = default;
  McQuitReply(const McQuitReply&) = default;
  McQuitReply& operator=(const McQuitReply&) = default;
  McQuitReply(McQuitReply&&) = default;
  McQuitReply& operator=(McQuitReply&&) = default;
  explicit McQuitReply(carbon::Result carbonResult) {
    underlyingThriftStruct_.result = carbonResult;
  }

  carbon::Result result() const {
    return underlyingThriftStruct_.result;
  }
  carbon::Result& result() {
    return underlyingThriftStruct_.result;
  }
  const std::string& message() const {
    return underlyingThriftStruct_.message;
  }
  std::string& message() {
    return underlyingThriftStruct_.message;
  }
  int16_t appSpecificErrorCode() const {
    return underlyingThriftStruct_.appSpecificErrorCode;
  }
  int16_t& appSpecificErrorCode() {
    return underlyingThriftStruct_.appSpecificErrorCode;
  }
  uint64_t flags() const {
    return 0;
  }
  int32_t exptime() const {
    return 0;
  }
  const facebook::memcache::thrift::McQuitReply& getThriftStruct() const {
    return underlyingThriftStruct_;
  }
  facebook::memcache::thrift::McQuitReply& getThriftStruct() {
    return underlyingThriftStruct_;
  }

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  // Methods for Thrift interoperability, note that the methods work with Thrift
  // protocols and not Carbon protocol.
  void __clear() {
    underlyingThriftStruct_.__clear();
  }
  template <class Protocol>
  uint32_t write(Protocol* protocol) const {
    return underlyingThriftStruct_.write(protocol);
  }
  template <class Protocol>
  uint32_t serializedSize(Protocol* protocol) const {
    return underlyingThriftStruct_.serializedSize(protocol);
  }
  template <class Protocol>
  uint32_t serializedSizeZC(Protocol* protocol) const {
    return underlyingThriftStruct_.serializedSizeZC(protocol);
  }
 private:
  template <class Protocol>
  void readNoXfer(Protocol* protocol) {
    underlyingThriftStruct_.read(protocol);
  }

  friend class apache::thrift::Cpp2Ops<McQuitReply>;

 private:
  facebook::memcache::thrift::McQuitReply underlyingThriftStruct_;
};

class McExecReply;

class McExecRequest : public carbon::RequestCommon {
 public:
  using reply_type = McExecReply;
  static constexpr bool hasExptime = false;
  static constexpr bool hasFlags = false;
  static constexpr bool hasKey = true;
  static constexpr bool hasValue = false;
  static constexpr size_t typeId = 39;
  static constexpr const char* name = "exec";

  McExecRequest() = default;
  McExecRequest(const McExecRequest&) = default;
  McExecRequest& operator=(const McExecRequest&) = default;
  McExecRequest(McExecRequest&&) = default;
  McExecRequest& operator=(McExecRequest&&) = default;
  explicit McExecRequest(folly::StringPiece sp) {
    underlyingThriftStruct_.key = sp;
  }
  explicit McExecRequest(folly::IOBuf&& carbonKey) {
    underlyingThriftStruct_.key = std::move(carbonKey);
  }

  const carbon::Keys<folly::IOBuf>& key() const {
    return underlyingThriftStruct_.key;
  }
  carbon::Keys<folly::IOBuf>& key() {
    markBufferAsDirty();
    return underlyingThriftStruct_.key;
  }
  uint64_t flags() const {
    return 0;
  }
  int32_t exptime() const {
    return 0;
  }
  const facebook::memcache::thrift::McExecRequest& getThriftStruct() const {
    return underlyingThriftStruct_;
  }
  facebook::memcache::thrift::McExecRequest& getThriftStruct() {
    markBufferAsDirty();
    return underlyingThriftStruct_;
  }

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  // Methods for Thrift interoperability, note that the methods work with Thrift
  // protocols and not Carbon protocol.
  void __clear() {
    underlyingThriftStruct_.__clear();
  }
  template <class Protocol>
  uint32_t write(Protocol* protocol) const {
    return underlyingThriftStruct_.write(protocol);
  }
  template <class Protocol>
  uint32_t serializedSize(Protocol* protocol) const {
    return underlyingThriftStruct_.serializedSize(protocol);
  }
  template <class Protocol>
  uint32_t serializedSizeZC(Protocol* protocol) const {
    return underlyingThriftStruct_.serializedSizeZC(protocol);
  }
 private:
  template <class Protocol>
  void readNoXfer(Protocol* protocol) {
    underlyingThriftStruct_.read(protocol);
  }

  friend class apache::thrift::Cpp2Ops<McExecRequest>;

 private:
  facebook::memcache::thrift::McExecRequest underlyingThriftStruct_;
};

class McExecReply : public carbon::ReplyCommon {
 public:
  static constexpr bool hasExptime = false;
  static constexpr bool hasFlags = false;
  static constexpr bool hasKey = false;
  static constexpr bool hasValue = false;
  static constexpr size_t typeId = 40;

  McExecReply() = default;
  McExecReply(const McExecReply&) = default;
  McExecReply& operator=(const McExecReply&) = default;
  McExecReply(McExecReply&&) = default;
  McExecReply& operator=(McExecReply&&) = default;
  explicit McExecReply(carbon::Result carbonResult) {
    underlyingThriftStruct_.result = carbonResult;
  }

  carbon::Result result() const {
    return underlyingThriftStruct_.result;
  }
  carbon::Result& result() {
    return underlyingThriftStruct_.result;
  }
  const std::string& response() const {
    return underlyingThriftStruct_.response;
  }
  std::string& response() {
    return underlyingThriftStruct_.response;
  }
  const std::string& message() const {
    return underlyingThriftStruct_.message;
  }
  std::string& message() {
    return underlyingThriftStruct_.message;
  }
  int16_t appSpecificErrorCode() const {
    return underlyingThriftStruct_.appSpecificErrorCode;
  }
  int16_t& appSpecificErrorCode() {
    return underlyingThriftStruct_.appSpecificErrorCode;
  }
  uint64_t flags() const {
    return 0;
  }
  int32_t exptime() const {
    return 0;
  }
  const facebook::memcache::thrift::McExecReply& getThriftStruct() const {
    return underlyingThriftStruct_;
  }
  facebook::memcache::thrift::McExecReply& getThriftStruct() {
    return underlyingThriftStruct_;
  }

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  // Methods for Thrift interoperability, note that the methods work with Thrift
  // protocols and not Carbon protocol.
  void __clear() {
    underlyingThriftStruct_.__clear();
  }
  template <class Protocol>
  uint32_t write(Protocol* protocol) const {
    return underlyingThriftStruct_.write(protocol);
  }
  template <class Protocol>
  uint32_t serializedSize(Protocol* protocol) const {
    return underlyingThriftStruct_.serializedSize(protocol);
  }
  template <class Protocol>
  uint32_t serializedSizeZC(Protocol* protocol) const {
    return underlyingThriftStruct_.serializedSizeZC(protocol);
  }
 private:
  template <class Protocol>
  void readNoXfer(Protocol* protocol) {
    underlyingThriftStruct_.read(protocol);
  }

  friend class apache::thrift::Cpp2Ops<McExecReply>;

 private:
  facebook::memcache::thrift::McExecReply underlyingThriftStruct_;
};

class GoAwayRequest;

class GoAwayAcknowledgement : public carbon::RequestCommon {
 public:
  using reply_type = GoAwayRequest;
  static constexpr bool hasExptime = false;
  static constexpr bool hasFlags = false;
  static constexpr bool hasKey = false;
  static constexpr bool hasValue = false;
  static constexpr size_t typeId = 41;
  static constexpr const char* name = "goaway";

  GoAwayAcknowledgement() = default;
  GoAwayAcknowledgement(const GoAwayAcknowledgement&) = default;
  GoAwayAcknowledgement& operator=(const GoAwayAcknowledgement&) = default;
  GoAwayAcknowledgement(GoAwayAcknowledgement&&) = default;
  GoAwayAcknowledgement& operator=(GoAwayAcknowledgement&&) = default;

  uint64_t flags() const {
    return 0;
  }
  int32_t exptime() const {
    return 0;
  }
  const facebook::memcache::thrift::GoAwayAcknowledgement& getThriftStruct() const {
    return underlyingThriftStruct_;
  }
  facebook::memcache::thrift::GoAwayAcknowledgement& getThriftStruct() {
    markBufferAsDirty();
    return underlyingThriftStruct_;
  }

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  // Methods for Thrift interoperability, note that the methods work with Thrift
  // protocols and not Carbon protocol.
  void __clear() {
    underlyingThriftStruct_.__clear();
  }
  template <class Protocol>
  uint32_t write(Protocol* protocol) const {
    return underlyingThriftStruct_.write(protocol);
  }
  template <class Protocol>
  uint32_t serializedSize(Protocol* protocol) const {
    return underlyingThriftStruct_.serializedSize(protocol);
  }
  template <class Protocol>
  uint32_t serializedSizeZC(Protocol* protocol) const {
    return underlyingThriftStruct_.serializedSizeZC(protocol);
  }
 private:
  template <class Protocol>
  void readNoXfer(Protocol* protocol) {
    underlyingThriftStruct_.read(protocol);
  }

  friend class apache::thrift::Cpp2Ops<GoAwayAcknowledgement>;

 private:
  facebook::memcache::thrift::GoAwayAcknowledgement underlyingThriftStruct_;
};

class GoAwayRequest : public carbon::ReplyCommon {
 public:
  static constexpr bool hasExptime = false;
  static constexpr bool hasFlags = false;
  static constexpr bool hasKey = false;
  static constexpr bool hasValue = false;
  static constexpr size_t typeId = 42;

  GoAwayRequest() = default;
  GoAwayRequest(const GoAwayRequest&) = default;
  GoAwayRequest& operator=(const GoAwayRequest&) = default;
  GoAwayRequest(GoAwayRequest&&) = default;
  GoAwayRequest& operator=(GoAwayRequest&&) = default;
  explicit GoAwayRequest(carbon::Result carbonResult) {
    underlyingThriftStruct_.result = carbonResult;
  }

  carbon::Result result() const {
    return underlyingThriftStruct_.result;
  }
  carbon::Result& result() {
    return underlyingThriftStruct_.result;
  }
  const std::string& reason() const {
    return underlyingThriftStruct_.reason;
  }
  std::string& reason() {
    return underlyingThriftStruct_.reason;
  }
  uint64_t flags() const {
    return 0;
  }
  int32_t exptime() const {
    return 0;
  }
  const facebook::memcache::thrift::GoAwayRequest& getThriftStruct() const {
    return underlyingThriftStruct_;
  }
  facebook::memcache::thrift::GoAwayRequest& getThriftStruct() {
    return underlyingThriftStruct_;
  }

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  // Methods for Thrift interoperability, note that the methods work with Thrift
  // protocols and not Carbon protocol.
  void __clear() {
    underlyingThriftStruct_.__clear();
  }
  template <class Protocol>
  uint32_t write(Protocol* protocol) const {
    return underlyingThriftStruct_.write(protocol);
  }
  template <class Protocol>
  uint32_t serializedSize(Protocol* protocol) const {
    return underlyingThriftStruct_.serializedSize(protocol);
  }
  template <class Protocol>
  uint32_t serializedSizeZC(Protocol* protocol) const {
    return underlyingThriftStruct_.serializedSizeZC(protocol);
  }
 private:
  template <class Protocol>
  void readNoXfer(Protocol* protocol) {
    underlyingThriftStruct_.read(protocol);
  }

  friend class apache::thrift::Cpp2Ops<GoAwayRequest>;

 private:
  facebook::memcache::thrift::GoAwayRequest underlyingThriftStruct_;
};
} // namespace memcache
} // namespace facebook

#include "CommonMessages-inl.h"
