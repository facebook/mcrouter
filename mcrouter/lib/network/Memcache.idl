namespace facebook::memcache;

import "mcrouter/lib/network/Common.idl"

request McGetRequest {
  id: 1;
  name: "get";
  reply: McGetReply;

  1: carbon::Keys<folly::IOBuf> key;
  2: uint64_t flags;
};

reply McGetReply {
  1: Result result;
  2: folly::Optional<folly::IOBuf> value;
  3: uint64_t flags;
  4: std::string message;
  5: int16_t appSpecificErrorCode;
};

request McSetRequest {
  id: 2;
  name: "set";
  reply: McSetReply;

  1: carbon::Keys<folly::IOBuf> key;
  2: int32_t exptime;
  3: uint64_t flags;
  4: folly::IOBuf value;
};

reply McSetReply {
  1: Result result;
  2: uint64_t flags;
  3: folly::IOBuf value;
  4: std::string message;
  5: int16_t appSpecificErrorCode;
};

request McDeleteRequest {
  id: 3;
  name: "delete";
  reply: McDeleteReply;

  1: carbon::Keys<folly::IOBuf> key;
  2: uint64_t flags;
  3: int32_t exptime;
  4: folly::IOBuf value;
};

reply McDeleteReply {
  1: Result result;
  2: uint64_t flags;
  3: folly::IOBuf value;
  4: std::string message;
  5: int16_t appSpecificErrorCode;
};

request McLeaseGetRequest {
  id: 4;
  name: "lease-get";
  reply: McLeaseGetReply;

  1: carbon::Keys<folly::IOBuf> key;
  2: uint64_t flags;
};

reply McLeaseGetReply {
  1: Result result;
  2: int64_t leaseToken;
  3: folly::Optional<folly::IOBuf> value;
  4: uint64_t flags;
  5: std::string message;
  6: int16_t appSpecificErrorCode;
};

request McLeaseSetRequest {
  id: 5;
  name: "lease-set";
  reply: McLeaseSetReply;

  1: carbon::Keys<folly::IOBuf> key;
  2: int32_t exptime;
  3: uint64_t flags;
  4: folly::IOBuf value;
  5: int64_t leaseToken;
};

reply McLeaseSetReply {
  1: Result result;
  2: std::string message;
  3: int16_t appSpecificErrorCode;
};

request McAddRequest {
  id: 6;
  name: "add";
  reply: McAddReply;

  1: carbon::Keys<folly::IOBuf> key;
  2: int32_t exptime;
  3: uint64_t flags;
  4: folly::IOBuf value;
};

reply McAddReply {
  1: Result result;
  2: std::string message;
  3: int16_t appSpecificErrorCode;
};

request McReplaceRequest {
  id: 7;
  name: "replace";
  reply: McReplaceReply;

  1: carbon::Keys<folly::IOBuf> key;
  2: int32_t exptime;
  3: uint64_t flags;
  4: folly::IOBuf value;
};

reply McReplaceReply {
  1: Result result;
  2: std::string message;
  3: int16_t appSpecificErrorCode;
};

request McGetsRequest {
  id: 8;
  name: "gets";
  reply: McGetsReply;

  1: carbon::Keys<folly::IOBuf> key;
};

reply McGetsReply {
  1: Result result;
  2: uint64_t casToken;
  3: folly::Optional<folly::IOBuf> value;
  4: uint64_t flags;
  5: std::string message;
  6: int16_t appSpecificErrorCode;
};

request McCasRequest {
  id: 9;
  name: "cas";
  reply: McCasReply;

  1: carbon::Keys<folly::IOBuf> key;
  2: int32_t exptime;
  3: uint64_t flags;
  4: folly::IOBuf value;
  5: uint64_t casToken;
};

reply McCasReply {
  1: Result result;
  2: std::string message;
  3: int16_t appSpecificErrorCode;
};

request McIncrRequest {
  id: 10;
  name: "incr";
  reply: McIncrReply;

  1: carbon::Keys<folly::IOBuf> key;
  2: int64_t delta;
};

reply McIncrReply {
  1: Result result;
  2: int64_t delta;
  3: std::string message;
  4: int16_t appSpecificErrorCode;
};

request McDecrRequest {
  id: 11;
  name: "decr";
  reply: McDecrReply;

  1: carbon::Keys<folly::IOBuf> key;
  2: int64_t delta;
};

reply McDecrReply {
  1: Result result;
  2: int64_t delta;
  3: std::string message;
  4: int16_t appSpecificErrorCode;
};

request McMetagetRequest {
  id: 12;
  name: "metaget";
  reply: McMetagetReply;

  1: carbon::Keys<folly::IOBuf> key;
};

reply McMetagetReply {
  1: Result result;
  2: int32_t age; # can be -1
  3: int32_t exptime;
  4: int16_t ipv;
  5: std::string ipAddress;
  6: std::string message;
  7: int16_t appSpecificErrorCode;
};

request McAppendRequest {
  id: 14;
  name: "append";
  reply: McAppendReply;

  1: carbon::Keys<folly::IOBuf> key;
  2: int32_t exptime;
  3: uint64_t flags;
  4: folly::IOBuf value;
};

reply McAppendReply {
  1: Result result;
  2: std::string message;
  3: int16_t appSpecificErrorCode;
};

request McPrependRequest {
  id: 15;
  name: "prepend";
  reply: McPrependReply;

  1: carbon::Keys<folly::IOBuf> key;
  2: int32_t exptime;
  3: uint64_t flags;
  4: folly::IOBuf value;
};

reply McPrependReply {
  1: Result result;
  2: std::string message;
  3: int16_t appSpecificErrorCode;
};

request McTouchRequest {
  id: 16;
  name: "touch";
  reply: McTouchReply;

  1: carbon::Keys<folly::IOBuf> key;
  2: int32_t exptime;
};

reply McTouchReply {
  1: Result result;
  2: std::string message;
  3: int16_t appSpecificErrorCode;
};

request McFlushReRequest {
  id: 21;
  name: "flushre";
  reply: McFlushReReply;

  1: carbon::Keys<folly::IOBuf> key;
};

reply McFlushReReply {
  1: Result result;
  2: std::string message;
  3: int16_t appSpecificErrorCode;
};

request McFlushAllRequest {
  id: 22;
  name: "flushall";
  reply: McFlushAllReply;

  1: carbon::Keys<folly::IOBuf> key;
  2: int32_t delay;
};

reply McFlushAllReply {
  1: Result result;
  2: std::string message;
  3: int16_t appSpecificErrorCode;
};

request McGatRequest {
  id: 23;
  name: "gat";
  reply: McGatReply;

  1: int32_t exptime;
  2: carbon::Keys<folly::IOBuf> key;
};

reply McGatReply {
  1: Result result;
  2: folly::Optional<folly::IOBuf> value;
  3: uint64_t flags;
  4: std::string message;
  5: int16_t appSpecificErrorCode;
};

request McGatsRequest {
  id: 24;
  name: "gats";
  reply: McGatsReply;

  1: int32_t exptime;
  2: carbon::Keys<folly::IOBuf> key;
};

reply McGatsReply {
  1: Result result;
  2: uint64_t casToken;
  3: folly::Optional<folly::IOBuf> value;
  4: uint64_t flags;
  5: std::string message;
  6: int16_t appSpecificErrorCode;
};

service {
  additional_requests: [];
  on_reply_logger: facebook::memcache::mcrouter::AdditionalProxyRequestLogger;
  enable_shutdown: false;
  stats: {
    McDeleteRequest,
    McGetRequest,
    McSetRequest,
    McGetsRequest,
    McCasRequest,
    McMetagetRequest,
    McAddRequest,
    McReplaceRequest,
    McAppendRequest,
    McPrependRequest,
    McIncrRequest,
    McDecrRequest,
    McFlushReRequest,
    McFlushAllRequest,
    McTouchRequest,
    McGatRequest,
    McGatsRequest,
    # For backwards compatibility in stats names
    lease_get: [
      McLeaseGetRequest
    ],
    lease_set: [
      McLeaseSetRequest
    ]
  };
  routing_groups: {
    get: [
      McGetRequest,
      McGetsRequest,
      McMetagetRequest,
      McLeaseGetRequest,
      McGatRequest,
      McGatsRequest
    ],
    update: [
      McSetRequest,
      McAddRequest,
      McReplaceRequest,
      McLeaseSetRequest,
      McAppendRequest,
      McPrependRequest,
      McCasRequest
    ],
    delete: [
      McDeleteRequest
    ],
    arithmetic: [
      McIncrRequest,
      McDecrRequest
    ]
  };
  gen_client_tool: true;
};
