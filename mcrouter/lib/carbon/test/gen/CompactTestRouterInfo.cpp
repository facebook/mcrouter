/*
 *  Copyright (c) 2017-present, Facebook, Inc.
 *
 *  This source code is licensed under the MIT license found in the LICENSE
 *  file in the root directory of this source tree.
 *
 */

/*
 *  THIS FILE IS AUTOGENERATED. DO NOT MODIFY IT; ALL CHANGES WILL BE LOST IN
 *  VAIN.
 *
 *  @generated
 */
#include "CompactTestRouterInfo.h"

#include <unordered_map>

#include <folly/Range.h>
#include <folly/dynamic.h>

#include <mcrouter/routes/ExtraRouteHandleProviderIf.h>
#include <mcrouter/routes/McRouteHandleProvider.h>

#include <mcrouter/lib/routes/NullRoute.h>
#include <mcrouter/routes/AllAsyncRouteFactory.h>
#include <mcrouter/routes/AllFastestRouteFactory.h>
#include <mcrouter/routes/AllInitialRouteFactory.h>
#include <mcrouter/routes/AllMajorityRouteFactory.h>
#include <mcrouter/routes/AllSyncRouteFactory.h>
#include <mcrouter/routes/BlackholeRoute.h>
#include <mcrouter/routes/DevNullRoute.h>
#include <mcrouter/routes/ErrorRoute.h>
#include <mcrouter/routes/FailoverRoute.h>
#include <mcrouter/routes/HashRouteFactory.h>
#include <mcrouter/routes/HostIdRouteFactory.h>
#include <mcrouter/routes/LatencyInjectionRoute.h>
#include <mcrouter/routes/LatestRoute.h>
#include <mcrouter/routes/LoadBalancerRoute.h>
#include <mcrouter/routes/LoggingRoute.h>
#include <mcrouter/routes/MigrateRouteFactory.h>
#include <mcrouter/routes/MissFailoverRoute.h>
#include <mcrouter/routes/ModifyKeyRoute.h>
#include <mcrouter/routes/OperationSelectorRoute.h>
#include <mcrouter/routes/OutstandingLimitRoute.h>
#include <mcrouter/routes/RandomRouteFactory.h>

#include <mcrouter/routes/McExtraRouteHandleProvider.h>

using namespace facebook::memcache;
using namespace facebook::memcache::mcrouter;

namespace carbon {
namespace test {

/* static */ CompactTestRouterInfo::RouteHandleFactoryMap
CompactTestRouterInfo::buildRouteMap() {
  RouteHandleFactoryMap map{
      {"AllAsyncRoute", &makeAllAsyncRoute<CompactTestRouterInfo>},
      {"AllFastestRoute", &makeAllFastestRoute<CompactTestRouterInfo>},
      {"AllInitialRoute", &makeAllInitialRoute<CompactTestRouterInfo>},
      {"AllMajorityRoute", &makeAllMajorityRoute<CompactTestRouterInfo>},
      {"AllSyncRoute", &makeAllSyncRoute<CompactTestRouterInfo>},
      {"BlackholeRoute", &makeBlackholeRoute<CompactTestRouterInfo>},
      {"DevNullRoute", &makeDevNullRoute<CompactTestRouterInfo>},
      {"ErrorRoute", &makeErrorRoute<CompactTestRouterInfo>},
      {"HashRoute",
       [](RouteHandleFactory<RouteHandleIf>& factory,
          const folly::dynamic& json) {
         return makeHashRoute<CompactTestRouterInfo>(factory, json);
       }},
      {"HostIdRoute", &makeHostIdRoute<CompactTestRouterInfo>},
      {"LatencyInjectionRoute",
       &makeLatencyInjectionRoute<CompactTestRouterInfo>},
      {"LatestRoute", &makeLatestRoute<CompactTestRouterInfo>},
      {"LoadBalancerRoute", &makeLoadBalancerRoute<CompactTestRouterInfo>},
      {"LoggingRoute", &makeLoggingRoute<CompactTestRouterInfo>},
      {"MigrateRoute", &makeMigrateRoute<CompactTestRouterInfo>},
      {"MissFailoverRoute", &makeMissFailoverRoute<CompactTestRouterInfo>},
      {"ModifyKeyRoute", &makeModifyKeyRoute<CompactTestRouterInfo>},
      {"NullRoute", &makeNullRoute<CompactTestRouteHandleIf>},
      {"OperationSelectorRoute",
       &makeOperationSelectorRoute<CompactTestRouterInfo>},
      {"RandomRoute", &makeRandomRoute<CompactTestRouterInfo>},
  };
  return map;
}

/* static */
std::unique_ptr<ExtraRouteHandleProviderIf<CompactTestRouterInfo>>
CompactTestRouterInfo::buildExtraProvider() {
  return std::make_unique<McExtraRouteHandleProvider<CompactTestRouterInfo>>();
}
} // namespace test
} // namespace carbon
