/*
 *  Copyright (c) 2017-present, Facebook, Inc.
 *
 *  This source code is licensed under the MIT license found in the LICENSE
 *  file in the root directory of this source tree.
 *
 */

/*
 *  THIS FILE IS AUTOGENERATED. DO NOT MODIFY IT; ALL CHANGES WILL BE LOST IN
 *  VAIN.
 *
 *  @generated
 */

namespace carbon {
namespace test {

template <class V>
void TestRequest::visitFields(V&& v) {
  if (v.enterMixin(1, "Base", _carbon_simplestruct_)) {
    _carbon_simplestruct_.visitFields(std::forward<V>(v));
  }
  if (!v.leaveMixin()) {
    return;
  }
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "testEnum", testEnum_)) {
    return;
  }
  if (!v.visitField(3, "testBool", testBool_)) {
    return;
  }
  if (!v.visitField(4, "testChar", testChar_)) {
    return;
  }
  if (!v.visitField(5, "testInt8", testInt8_)) {
    return;
  }
  if (!v.visitField(6, "testInt16", testInt16_)) {
    return;
  }
  if (!v.visitField(7, "testInt32", testInt32_)) {
    return;
  }
  if (!v.visitField(8, "testInt64", testInt64_)) {
    return;
  }
  if (!v.visitField(9, "testUInt8", testUInt8_)) {
    return;
  }
  if (!v.visitField(10, "testUInt16", testUInt16_)) {
    return;
  }
  if (!v.visitField(11, "testUInt32", testUInt32_)) {
    return;
  }
  if (!v.visitField(12, "testUInt64", testUInt64_)) {
    return;
  }
  if (!v.visitField(13, "testFloat", testFloat_)) {
    return;
  }
  if (!v.visitField(14, "testDouble", testDouble_)) {
    return;
  }
  if (!v.visitField(15, "testShortString", testShortString_)) {
    return;
  }
  if (!v.visitField(16, "testLongString", testLongString_)) {
    return;
  }
  if (!v.visitField(17, "testIobuf", testIobuf_)) {
    return;
  }
  if (!v.visitField(18, "testStruct", testStruct_)) {
    return;
  }
  if (!v.visitField(19, "testList", testList_)) {
    return;
  }
  if (!v.visitField(20, "testOptionalString", testOptionalString_)) {
    return;
  }
  if (!v.visitField(21, "testOptionalIobuf", testOptionalIobuf_)) {
    return;
  }
  if (!v.visitField(22, "testEnumVec", testEnumVec_)) {
    return;
  }
  if (!v.visitField(23, "testUnion", testUnion_)) {
    return;
  }
  if (!v.visitField(24, "testNestedVec", testNestedVec_)) {
    return;
  }
  if (!v.visitField(25, "testUMap", testUMap_)) {
    return;
  }
  if (!v.visitField(26, "testMap", testMap_)) {
    return;
  }
  if (!v.visitField(27, "testComplexMap", testComplexMap_)) {
    return;
  }
  if (!v.visitField(28, "testUSet", testUSet_)) {
    return;
  }
  if (!v.visitField(29, "testSet", testSet_)) {
    return;
  }
  if (!v.visitField(30, "testOptionalBool", testOptionalBool_)) {
    return;
  }
  if (!v.visitField(31, "testOptionalVec", testOptionalVec_)) {
    return;
  }
  if (!v.visitField(32, "testIOBufList", testIOBufList_)) {
    return;
  }
  if (!v.visitField(100, "testType", testType_)) {
    return;
  }
}

template <class V>
void TestRequest::visitFields(V&& v) const {
  if (v.enterMixin(1, "Base", _carbon_simplestruct_)) {
    _carbon_simplestruct_.visitFields(std::forward<V>(v));
  }
  if (!v.leaveMixin()) {
    return;
  }
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "testEnum", testEnum_)) {
    return;
  }
  if (!v.visitField(3, "testBool", testBool_)) {
    return;
  }
  if (!v.visitField(4, "testChar", testChar_)) {
    return;
  }
  if (!v.visitField(5, "testInt8", testInt8_)) {
    return;
  }
  if (!v.visitField(6, "testInt16", testInt16_)) {
    return;
  }
  if (!v.visitField(7, "testInt32", testInt32_)) {
    return;
  }
  if (!v.visitField(8, "testInt64", testInt64_)) {
    return;
  }
  if (!v.visitField(9, "testUInt8", testUInt8_)) {
    return;
  }
  if (!v.visitField(10, "testUInt16", testUInt16_)) {
    return;
  }
  if (!v.visitField(11, "testUInt32", testUInt32_)) {
    return;
  }
  if (!v.visitField(12, "testUInt64", testUInt64_)) {
    return;
  }
  if (!v.visitField(13, "testFloat", testFloat_)) {
    return;
  }
  if (!v.visitField(14, "testDouble", testDouble_)) {
    return;
  }
  if (!v.visitField(15, "testShortString", testShortString_)) {
    return;
  }
  if (!v.visitField(16, "testLongString", testLongString_)) {
    return;
  }
  if (!v.visitField(17, "testIobuf", testIobuf_)) {
    return;
  }
  if (!v.visitField(18, "testStruct", testStruct_)) {
    return;
  }
  if (!v.visitField(19, "testList", testList_)) {
    return;
  }
  if (!v.visitField(20, "testOptionalString", testOptionalString_)) {
    return;
  }
  if (!v.visitField(21, "testOptionalIobuf", testOptionalIobuf_)) {
    return;
  }
  if (!v.visitField(22, "testEnumVec", testEnumVec_)) {
    return;
  }
  if (!v.visitField(23, "testUnion", testUnion_)) {
    return;
  }
  if (!v.visitField(24, "testNestedVec", testNestedVec_)) {
    return;
  }
  if (!v.visitField(25, "testUMap", testUMap_)) {
    return;
  }
  if (!v.visitField(26, "testMap", testMap_)) {
    return;
  }
  if (!v.visitField(27, "testComplexMap", testComplexMap_)) {
    return;
  }
  if (!v.visitField(28, "testUSet", testUSet_)) {
    return;
  }
  if (!v.visitField(29, "testSet", testSet_)) {
    return;
  }
  if (!v.visitField(30, "testOptionalBool", testOptionalBool_)) {
    return;
  }
  if (!v.visitField(31, "testOptionalVec", testOptionalVec_)) {
    return;
  }
  if (!v.visitField(32, "testIOBufList", testIOBufList_)) {
    return;
  }
  if (!v.visitField(100, "testType", testType_)) {
    return;
  }
}

template <class V>
void TestReply::visitFields(V&& v) {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "valInt32", valInt32_)) {
    return;
  }
  if (!v.visitField(3, "valInt64", valInt64_)) {
    return;
  }
}

template <class V>
void TestReply::visitFields(V&& v) const {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "valInt32", valInt32_)) {
    return;
  }
  if (!v.visitField(3, "valInt64", valInt64_)) {
    return;
  }
}

template <class V>
void TestRequestStringKey::visitFields(V&& v) {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
}

template <class V>
void TestRequestStringKey::visitFields(V&& v) const {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
}

template <class V>
void TestReplyStringKey::visitFields(V&& v) {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
}

template <class V>
void TestReplyStringKey::visitFields(V&& v) const {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
}

template <class V>
void TestOptionalBool::visitFields(V&& v) {
  if (!v.visitField(1, "optionalBool", optionalBool_)) {
    return;
  }
}

template <class V>
void TestOptionalBool::visitFields(V&& v) const {
  if (!v.visitField(1, "optionalBool", optionalBool_)) {
    return;
  }
}

template <class V>
void TestOptionalUnion::visitFields(V&& v) {
  switch (_which_) {
    case 1:
      v.visitField(1, "umember1", umember1());
      break;

    case 2:
      v.visitField(2, "umember2", umember2());
      break;

    case 3:
      v.visitField(3, "umember3", umember3());
      break;

    default:
      break;
  }
}

template <class V>
void TestOptionalUnion::visitFields(V&& v) const {
  switch (_which_) {
    case 1:
      v.visitField(1, "umember1", umember1());
      break;

    case 2:
      v.visitField(2, "umember2", umember2());
      break;

    case 3:
      v.visitField(3, "umember3", umember3());
      break;

    default:
      break;
  }
}

template <class V>
void TestOptionalUnion::foreachMember(V&& v) {
  if (!v.template visitUnionMember<1, folly::Optional<int64_t>>(
          "umember1", *this)) {
    return;
  }

  if (!v.template visitUnionMember<2, folly::Optional<bool>>(
          "umember2", *this)) {
    return;
  }

  if (!v.template visitUnionMember<3, folly::Optional<std::string>>(
          "umember3", *this)) {
    return;
  }
}

template <class V>
void TestOptionalUnion::foreachMember(V&& v) const {
  if (!v.template visitUnionMember<1, folly::Optional<int64_t>>(
          "umember1", *this)) {
    return;
  }

  if (!v.template visitUnionMember<2, folly::Optional<bool>>(
          "umember2", *this)) {
    return;
  }

  if (!v.template visitUnionMember<3, folly::Optional<std::string>>(
          "umember3", *this)) {
    return;
  }
}
} // namespace test
} // namespace carbon
