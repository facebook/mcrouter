/*
 *  Copyright (c) 2017-present, Facebook, Inc.
 *
 *  This source code is licensed under the MIT license found in the LICENSE
 *  file in the root directory of this source tree.
 *
 */

/*
 *  THIS FILE IS AUTOGENERATED. DO NOT MODIFY IT; ALL CHANGES WILL BE LOST IN
 *  VAIN.
 *
 *  @generated
 */

namespace carbon {
namespace test2 {
namespace util {

template <class V>
void SimpleStruct::visitFields(V&& v) {
  if (!v.visitField(1, "member1", member1_)) {
    return;
  }
}

template <class V>
void SimpleStruct::visitFields(V&& v) const {
  if (!v.visitField(1, "member1", member1_)) {
    return;
  }
}

template <class V>
void SimpleUnion::visitFields(V&& v) {
  switch (_which_) {
    case 1:
      v.visitField(1, "umember1", umember1());
      break;

    case 2:
      v.visitField(2, "umember2", umember2());
      break;

    case 3:
      v.visitField(3, "umember3", umember3());
      break;

    default:
      break;
  }
}

template <class V>
void SimpleUnion::visitFields(V&& v) const {
  switch (_which_) {
    case 1:
      v.visitField(1, "umember1", umember1());
      break;

    case 2:
      v.visitField(2, "umember2", umember2());
      break;

    case 3:
      v.visitField(3, "umember3", umember3());
      break;

    default:
      break;
  }
}

template <class V>
void SimpleUnion::foreachMember(V&& v) {
  if (!v.template visitUnionMember<1, int64_t>("umember1", *this)) {
    return;
  }

  if (!v.template visitUnionMember<2, bool>("umember2", *this)) {
    return;
  }

  if (!v.template visitUnionMember<3, std::string>("umember3", *this)) {
    return;
  }
}

template <class V>
void SimpleUnion::foreachMember(V&& v) const {
  if (!v.template visitUnionMember<1, int64_t>("umember1", *this)) {
    return;
  }

  if (!v.template visitUnionMember<2, bool>("umember2", *this)) {
    return;
  }

  if (!v.template visitUnionMember<3, std::string>("umember3", *this)) {
    return;
  }
}

template <class V>
void YetAnotherRequest::visitFields(V&& v) {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
}

template <class V>
void YetAnotherRequest::visitFields(V&& v) const {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
}

template <class V>
void YetAnotherReply::visitFields(V&& v) {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
}

template <class V>
void YetAnotherReply::visitFields(V&& v) const {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
}
} // namespace util
} // namespace test2
} // namespace carbon
