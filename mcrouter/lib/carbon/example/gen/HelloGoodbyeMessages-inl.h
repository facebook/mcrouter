/*
 *  Copyright (c) 2017-present, Facebook, Inc.
 *
 *  This source code is licensed under the MIT license found in the LICENSE
 *  file in the root directory of this source tree.
 *
 */

/*
 *  THIS FILE IS AUTOGENERATED. DO NOT MODIFY IT; ALL CHANGES WILL BE LOST IN
 *  VAIN.
 *
 *  @generated
 */

namespace hellogoodbye {

template <class Writer>
void HelloRequest::serialize(Writer&& writer) const {
  writer.writeStructBegin();
  writer.writeField(1 /* field id */, key());
  writer.writeField(2 /* field id */, shardId());
  writer.writeFieldStop();
  writer.writeStructEnd();
}

template <class V>
void HelloRequest::visitFields(V&& v) {
  if (!v.visitField(1, "key", this->key())) {
    return;
  }
  if (!v.visitField(2, "shardId", this->shardId())) {
    return;
  }
}

template <class V>
void HelloRequest::visitFields(V&& v) const {
  if (!v.visitField(1, "key", this->key())) {
    return;
  }
  if (!v.visitField(2, "shardId", this->shardId())) {
    return;
  }
}

template <class Writer>
void HelloReply::serialize(Writer&& writer) const {
  writer.writeStructBegin();
  writer.writeField(1 /* field id */, result());
  writer.writeFieldStop();
  writer.writeStructEnd();
}

template <class V>
void HelloReply::visitFields(V&& v) {
  if (!v.visitField(1, "result", this->result())) {
    return;
  }
}

template <class V>
void HelloReply::visitFields(V&& v) const {
  if (!v.visitField(1, "result", this->result())) {
    return;
  }
}

template <class Writer>
void GoodbyeRequest::serialize(Writer&& writer) const {
  writer.writeStructBegin();
  writer.writeField(1 /* field id */, key());
  writer.writeField(2 /* field id */, shardId());
  writer.writeFieldStop();
  writer.writeStructEnd();
}

template <class V>
void GoodbyeRequest::visitFields(V&& v) {
  if (!v.visitField(1, "key", this->key())) {
    return;
  }
  if (!v.visitField(2, "shardId", this->shardId())) {
    return;
  }
}

template <class V>
void GoodbyeRequest::visitFields(V&& v) const {
  if (!v.visitField(1, "key", this->key())) {
    return;
  }
  if (!v.visitField(2, "shardId", this->shardId())) {
    return;
  }
}

template <class Writer>
void GoodbyeReply::serialize(Writer&& writer) const {
  writer.writeStructBegin();
  writer.writeField(1 /* field id */, result());
  writer.writeField(2 /* field id */, message());
  writer.writeFieldStop();
  writer.writeStructEnd();
}

template <class V>
void GoodbyeReply::visitFields(V&& v) {
  if (!v.visitField(1, "result", this->result())) {
    return;
  }
  if (!v.visitField(2, "message", this->message())) {
    return;
  }
}

template <class V>
void GoodbyeReply::visitFields(V&& v) const {
  if (!v.visitField(1, "result", this->result())) {
    return;
  }
  if (!v.visitField(2, "message", this->message())) {
    return;
  }
}
} // namespace hellogoodbye
