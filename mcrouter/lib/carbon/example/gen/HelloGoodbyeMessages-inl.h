/*
 *  Copyright (c) 2017-present, Facebook, Inc.
 *
 *  This source code is licensed under the MIT license found in the LICENSE
 *  file in the root directory of this source tree.
 *
 */

/*
 *  THIS FILE IS AUTOGENERATED. DO NOT MODIFY IT; ALL CHANGES WILL BE LOST IN
 *  VAIN.
 *
 *  @generated
 */

namespace hellogoodbye {

template <class V>
void HelloRequest::visitFields(V&& v) {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "shardId", shardId_)) {
    return;
  }
}

template <class V>
void HelloRequest::visitFields(V&& v) const {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "shardId", shardId_)) {
    return;
  }
}

template <class V>
void HelloReply::visitFields(V&& v) {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
}

template <class V>
void HelloReply::visitFields(V&& v) const {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
}

template <class V>
void GoodbyeRequest::visitFields(V&& v) {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "shardId", shardId_)) {
    return;
  }
}

template <class V>
void GoodbyeRequest::visitFields(V&& v) const {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "shardId", shardId_)) {
    return;
  }
}

template <class V>
void GoodbyeReply::visitFields(V&& v) {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "message", message_)) {
    return;
  }
}

template <class V>
void GoodbyeReply::visitFields(V&& v) const {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "message", message_)) {
    return;
  }
}
} // namespace hellogoodbye
