/*
 *  Copyright (c) 2017-present, Facebook, Inc.
 *
 *  This source code is licensed under the MIT license found in the LICENSE
 *  file in the root directory of this source tree.
 *
 */

/*
 *  THIS FILE IS AUTOGENERATED. DO NOT MODIFY IT; ALL CHANGES WILL BE LOST IN
 *  VAIN.
 *
 *  @generated
 */
#pragma once

#include <functional>
#include <unordered_map>

#include <folly/Range.h>

#include <mcrouter/lib/carbon/Stats.h>

#include "mcrouter/lib/carbon/example/gen/HelloGoodbyeRouteHandleIf.h"
#include "mcrouter/lib/carbon/example/gen/HelloGoodbyeRouterStats.h"

// Forward declarations
namespace folly {
struct dynamic;
} // namespace folly

namespace facebook {
namespace memcache {
template <class RouteHandleIf>
class RouteHandleFactory;
namespace mcrouter {
template <class RouterInfo>
class ExtraRouteHandleProviderIf;
} // namespace mcrouter
} // namespace memcache
} // namespace facebook

namespace hellogoodbye {

namespace detail {

using HelloGoodbyeRoutableRequests = carbon::List<GoodbyeRequest, HelloRequest>;
} // namespace detail

struct HelloGoodbyeRouterInfo {
  using RouteHandleIf = HelloGoodbyeRouteHandleIf;
  using RouteHandlePtr = std::shared_ptr<RouteHandleIf>;

  static constexpr const char* name = "HelloGoodbye";

  template <class Route>
  using RouteHandle = HelloGoodbyeRouteHandle<Route>;
  using RoutableRequests = detail::HelloGoodbyeRoutableRequests;

  using RouterStats = carbon::Stats<HelloGoodbyeRouterStatsConfig>;

  using RouteHandleFactoryMap = std::unordered_map<
      folly::StringPiece,
      std::function<RouteHandlePtr(
          facebook::memcache::RouteHandleFactory<RouteHandleIf>&,
          const folly::dynamic&)>,
      folly::Hash>;

  static RouteHandleFactoryMap buildRouteMap();

  static std::unique_ptr<facebook::memcache::mcrouter::
                             ExtraRouteHandleProviderIf<HelloGoodbyeRouterInfo>>
  buildExtraProvider();
};
} // namespace hellogoodbye
